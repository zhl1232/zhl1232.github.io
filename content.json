{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"","text":"ECharts // 基于准备好的dom，初始化echarts实例 var myChart = echarts.init(document.getElementById('main')); // 指定图表的配置项和数据 var option = { title: { text: 'ECharts 入门示例' }, tooltip: {}, legend: { data:['销量'] }, xAxis: { data: [\"衬衫\",\"羊毛衫\",\"雪纺衫\",\"裤子\",\"高跟鞋\",\"袜子\"] }, yAxis: {}, series: [{ name: '销量', type: 'bar', data: [5, 20, 36, 10, 10, 20] }] }; // 使用刚指定的配置项和数据显示图表。 myChart.setOption(option); L2Dwidget.init({\"pluginRootPath\":\"live2dw/\",\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"tagMode\":false,\"log\":false,\"model\":{\"jsonPath\":\"/live2dw/assets/assets/haru01.model.json\"},\"display\":{\"position\":\"right\",\"width\":150,\"height\":300},\"mobile\":{\"show\":true}});","content":"<!DOCTYPE html>\n<html>\n<head><meta name=\"generator\" content=\"Hexo 3.9.0\">\n    <meta charset=\"utf-8\">\n    <title>ECharts</title>\n    <!-- 引入 echarts.js -->\n    <script src=\"https://cdn.bootcdn.net/ajax/libs/echarts/5.0.1/echarts.common.min.js\"></script>\n</head>\n<body>\n    <!-- 为ECharts准备一个具备大小（宽高）的Dom -->\n    <div id=\"main\" style=\"width: 600px;height:400px;\"></div>\n    <script type=\"text/javascript\">\n        // 基于准备好的dom，初始化echarts实例\n        var myChart = echarts.init(document.getElementById('main'));\n\n        // 指定图表的配置项和数据\n        var option = {\n            title: {\n                text: 'ECharts 入门示例'\n            },\n            tooltip: {},\n            legend: {\n                data:['销量']\n            },\n            xAxis: {\n                data: [\"衬衫\",\"羊毛衫\",\"雪纺衫\",\"裤子\",\"高跟鞋\",\"袜子\"]\n            },\n            yAxis: {},\n            series: [{\n                name: '销量',\n                type: 'bar',\n                data: [5, 20, 36, 10, 10, 20]\n            }]\n        };\n\n        // 使用刚指定的配置项和数据显示图表。\n        myChart.setOption(option);\n    </script>\n<script src=\"/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05\"></script><script>L2Dwidget.init({\"pluginRootPath\":\"live2dw/\",\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"tagMode\":false,\"log\":false,\"model\":{\"jsonPath\":\"/live2dw/assets/assets/haru01.model.json\"},\"display\":{\"position\":\"right\",\"width\":150,\"height\":300},\"mobile\":{\"show\":true}});</script></body>\n</html>"},{"title":"page","text":"","content":""},{"title":"leetcode.1047.删除字符串中的所有相邻重复项","text":"","content":""},{"title":"leetcode.961-重复N次的元素","text":"题目描述在大小为 2N 的数组 A 中有 N+1 个不同的元素，其中有一个元素重复了 N 次。 返回重复了 N 次的那个元素。 示例 1：12输入：[1,2,3,3]输出：3 示例 2：12输入：[2,1,2,5,3,2]输出：2 示例 3：12输入：[5,1,5,2,5,3,5,4]输出：5 提示：1234 &lt;= A.length &lt;= 100000 &lt;= A[i] &lt; 10000A.length 为偶数 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/n-repeated-element-in-size-2n-array著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 标签 哈希表 解题思路数组大小2N，一共 N+1 个元素，目标元素出现N次，说明其他元素只出现一次。 新建一个空的哈希表，遍历数组，如果当前元素出现2次，该元素为目标元素。 1234567891011121314/** * @param &#123;number[]&#125; A * @return &#123;number&#125; */var repeatedNTimes = function(A) &#123; let hash = new Map() for(num of A) &#123; if(hash.has(num)) &#123; return num &#125; else &#123; hash.set(num, 1) &#125; &#125;&#125;;","content":"<!--\n * @File: \n * @Author: 张宏亮 - zhl@xiaoniren.cn\n * @Date: 2019-08-09 23:03:47\n * @LastEditors: 张宏亮<zhl@xiaoniren.cn>\n * @LastEditTime: 2019-08-09 23:09:07\n * @Description: file content\n * @Versions: 1.0.0\n -->\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>在大小为 2N 的数组 A 中有 N+1 个不同的元素，其中有一个元素重复了 N 次。</p>\n<p>返回重复了 N 次的那个元素。</p>\n<p>示例 1：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：[1,2,3,3]</span><br><span class=\"line\">输出：3</span><br></pre></td></tr></table></figure></p>\n<p>示例 2：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：[2,1,2,5,3,2]</span><br><span class=\"line\">输出：2</span><br></pre></td></tr></table></figure></p>\n<p>示例 3：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：[5,1,5,2,5,3,5,4]</span><br><span class=\"line\">输出：5</span><br></pre></td></tr></table></figure></p>\n<p>提示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4 &lt;= A.length &lt;= 10000</span><br><span class=\"line\">0 &lt;= A[i] &lt; 10000</span><br><span class=\"line\">A.length 为偶数</span><br></pre></td></tr></table></figure></p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/n-repeated-element-in-size-2n-array\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/n-repeated-element-in-size-2n-array</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<p>标签 <strong>哈希表</strong></p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>数组大小2N，一共 N+1 个元素，目标元素出现N次，说明其他元素只出现一次。</p>\n<p>新建一个空的哈希表，遍历数组，如果当前元素出现2次，该元素为目标元素。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">A</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> repeatedNTimes = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">A</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> hash = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(num <span class=\"keyword\">of</span> A) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(hash.has(num)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> num</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            hash.set(num, <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"leetcode.832.翻转图像","text":"题目描述给定一个二进制矩阵 A，我们想先水平翻转图像，然后反转图像并返回结果。 水平翻转图片就是将图片的每一行都进行翻转，即逆序。例如，水平翻转 [1, 1, 0] 的结果是 [0, 1, 1]。 反转图片的意思是图片中的 0 全部被 1 替换， 1 全部被 0 替换。例如，反转 [0, 1, 1] 的结果是 [1, 0, 0]。 示例 1:1234输入: [[1,1,0],[1,0,1],[0,0,0]]输出: [[1,0,0],[0,1,0],[1,1,1]]解释: 首先翻转每一行: [[0,1,1],[1,0,1],[0,0,0]]； 然后反转图片: [[1,0,0],[0,1,0],[1,1,1]] 示例 2:1234输入: [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]输出: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]解释: 首先翻转每一行: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]]； 然后反转图片: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]] 说明:121 &lt;= A.length = A[0].length &lt;= 200 &lt;= A[i][j] &lt;= 1 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/flipping-an-image著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 标签 数组 方法一：数组API没啥说的。。1234567/** * @param &#123;number[][]&#125; A * @return &#123;number[][]&#125; */var flipAndInvertImage = function(A) &#123; return A.map(item =&gt; item.reverse().map(item1 =&gt; item1 === 0 ? 1 : 0))&#125;; 方法二：对撞双指针按位异或： 参与运算的两个值，如果两个相应位相同，则结果为0，否则为1。即：0^0=0， 1^0=1， 0^1=1， 1^1=0 所以 (0 和 1) ^ 1 就会相当于反转，1 会变成 0， 0 会变成 1。当然用三元运算符也行。 利用双指针，把右边的值反转放到左边，把左边的值反转放到右边。 就相当于翻转并反转了。 1234567891011121314151617181920/** * @param &#123;number[][]&#125; A * @return &#123;number[][]&#125; */var flipAndInvertImage = function(A) &#123; for (let i = 0; i &lt; A.length; i++) &#123; let left = 0 let right = A.length - 1 while (left &lt;= right) &#123; let temp = A[i][left] A[i][left] = A[i][right] ^ 1 A[i][right] = temp ^ 1 // A[i][left] = A[i][right] === 1 ? 0 : 1 // A[i][right] = temp === 1 ? 0 : 1 left++ right-- &#125; &#125; return A&#125; 方法三：规律比如 [1,1,0]，水平翻转后是[0,1,1]，再反转就会变为 [1,0,0]。 比如 [1,1,0,0]，水平翻转后是[0,0,1,1]，再反转就会变为 [1,1,0,0]. 会发现，两边的值只要不相等，水平翻转后再反转就会和之前一样。奇数长度中间值没法比较的一会再说。 再看两边值相等的，最后结果就是原来的值取反。 最后再看奇数长度中间值，发现都是取反。 所以只要判断对撞指针两边的值是否相等，如果相等，值不变。如果不相等值取反。如果是奇数，那把中间值也取反。 123456789101112131415161718192021222324/** * @param &#123;number[][]&#125; A * @return &#123;number[][]&#125; */var flipAndInvertImage = function(A) &#123; let n = A.length for (let i = 0; i &lt; n; i++) &#123; let left = 0 let right = n - 1 while (left &lt; right) &#123; if (A[i][left] === A[i][right]) &#123; A[i][left] = A[i][left] ^ 1 A[i][right] = A[i][right] ^ 1 &#125; left++ right-- &#125; if (n % 2) &#123; A[i][~~(n / 2)] = A[i][~~(n / 2)] ^ 1 &#125; &#125; return A&#125;","content":"<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定一个二进制矩阵 A，我们想先水平翻转图像，然后反转图像并返回结果。</p>\n<p>水平翻转图片就是将图片的每一行都进行翻转，即逆序。例如，水平翻转 [1, 1, 0] 的结果是 [0, 1, 1]。</p>\n<p>反转图片的意思是图片中的 0 全部被 1 替换， 1 全部被 0 替换。例如，反转 [0, 1, 1] 的结果是 [1, 0, 0]。</p>\n<p>示例 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [[1,1,0],[1,0,1],[0,0,0]]</span><br><span class=\"line\">输出: [[1,0,0],[0,1,0],[1,1,1]]</span><br><span class=\"line\">解释: 首先翻转每一行: [[0,1,1],[1,0,1],[0,0,0]]；</span><br><span class=\"line\">     然后反转图片: [[1,0,0],[0,1,0],[1,1,1]]</span><br></pre></td></tr></table></figure></p>\n<p>示例 2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]</span><br><span class=\"line\">输出: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]</span><br><span class=\"line\">解释: 首先翻转每一行: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]]；</span><br><span class=\"line\">     然后反转图片: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]</span><br></pre></td></tr></table></figure></p>\n<p>说明:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 &lt;= A.length = A[0].length &lt;= 20</span><br><span class=\"line\">0 &lt;= A[i][j] &lt;= 1</span><br></pre></td></tr></table></figure></p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/flipping-an-image\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/flipping-an-image</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<p>标签 <strong>数组</strong></p>\n<h3 id=\"方法一：数组API\"><a href=\"#方法一：数组API\" class=\"headerlink\" title=\"方法一：数组API\"></a>方法一：数组API</h3><p>没啥说的。。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[][]&#125;</span> <span class=\"variable\">A</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[][]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> flipAndInvertImage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">A</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> A.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.reverse().map(<span class=\"function\"><span class=\"params\">item1</span> =&gt;</span> item1 === <span class=\"number\">0</span> ? <span class=\"number\">1</span> : <span class=\"number\">0</span>))</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"方法二：对撞双指针\"><a href=\"#方法二：对撞双指针\" class=\"headerlink\" title=\"方法二：对撞双指针\"></a>方法二：对撞双指针</h3><p>按位异或：</p>\n<p>参与运算的两个值，如果两个相应位相同，则结果为0，否则为1。即：0^0=0， 1^0=1， 0^1=1， 1^1=0</p>\n<p>所以 (0 和 1) ^ 1 就会相当于反转，1 会变成 0， 0 会变成 1。当然用三元运算符也行。</p>\n<p>利用双指针，把右边的值反转放到左边，把左边的值反转放到右边。</p>\n<p>就相当于翻转并反转了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[][]&#125;</span> <span class=\"variable\">A</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[][]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> flipAndInvertImage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">A</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; A.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = A.length - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> temp = A[i][left]</span><br><span class=\"line\">      A[i][left] = A[i][right] ^ <span class=\"number\">1</span></span><br><span class=\"line\">      A[i][right] = temp ^ <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"comment\">// A[i][left] = A[i][right] === 1 ? 0 : 1</span></span><br><span class=\"line\">      <span class=\"comment\">// A[i][right] = temp === 1 ? 0 : 1</span></span><br><span class=\"line\">      left++</span><br><span class=\"line\">      right--</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> A</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法三：规律\"><a href=\"#方法三：规律\" class=\"headerlink\" title=\"方法三：规律\"></a>方法三：规律</h3><p>比如 [1,1,0]，水平翻转后是[0,1,1]，再反转就会变为 [1,0,0]。</p>\n<p>比如 [1,1,0,0]，水平翻转后是[0,0,1,1]，再反转就会变为 [1,1,0,0].</p>\n<p>会发现，两边的值只要不相等，水平翻转后再反转就会和之前一样。奇数长度中间值没法比较的一会再说。</p>\n<p>再看两边值相等的，最后结果就是原来的值取反。</p>\n<p>最后再看奇数长度中间值，发现都是取反。</p>\n<p>所以只要判断对撞指针两边的值是否相等，如果相等，值不变。如果不相等值取反。如果是奇数，那把中间值也取反。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[][]&#125;</span> <span class=\"variable\">A</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[][]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> flipAndInvertImage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">A</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> n = A.length</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = n - <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (A[i][left] === A[i][right]) &#123;</span><br><span class=\"line\">        A[i][left] = A[i][left] ^ <span class=\"number\">1</span></span><br><span class=\"line\">        A[i][right] = A[i][right] ^ <span class=\"number\">1</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      left++</span><br><span class=\"line\">      right--</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n % <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">      A[i][~~(n / <span class=\"number\">2</span>)] = A[i][~~(n / <span class=\"number\">2</span>)] ^ <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> A</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"leetcode.811.子域名访问计数","text":"题目描述一个网站域名，如”discuss.leetcode.com”，包含了多个子域名。作为顶级域名，常用的有”com”，下一级则有”leetcode.com”，最低的一级为”discuss.leetcode.com”。当我们访问域名”discuss.leetcode.com”时，也同时访问了其父域名”leetcode.com”以及顶级域名 “com”。 给定一个带访问次数和域名的组合，要求分别计算每个域名被访问的次数。其格式为访问次数+空格+地址，例如：”9001 discuss.leetcode.com”。 接下来会给出一组访问次数和域名组合的列表cpdomains 。要求解析出所有域名的访问次数，输出格式和输入格式相同，不限定先后顺序。 示例 1:1234输入: [&quot;9001 discuss.leetcode.com&quot;]输出: [&quot;9001 discuss.leetcode.com&quot;, &quot;9001 leetcode.com&quot;, &quot;9001 com&quot;] 说明:1例子中仅包含一个网站域名：&quot;discuss.leetcode.com&quot;。按照前文假设，子域名&quot;leetcode.com&quot;和&quot;com&quot;都会被访问，所以它们都被访问了9001次。 示例 21234输入: [&quot;900 google.mail.com&quot;, &quot;50 yahoo.com&quot;, &quot;1 intel.mail.com&quot;, &quot;5 wiki.org&quot;]输出: [&quot;901 mail.com&quot;,&quot;50 yahoo.com&quot;,&quot;900 google.mail.com&quot;,&quot;5 wiki.org&quot;,&quot;5 org&quot;,&quot;1 intel.mail.com&quot;,&quot;951 com&quot;] 说明:12按照假设，会访问&quot;google.mail.com&quot; 900次，&quot;yahoo.com&quot; 50次，&quot;intel.mail.com&quot; 1次，&quot;wiki.org&quot; 5次。而对于父域名，会访问&quot;mail.com&quot; 900+1 = 901次，&quot;com&quot; 900 + 50 + 1 = 951次，和 &quot;org&quot; 5 次。 注意事项：1234cpdomains 的长度小于 100。每个域名的长度小于100。每个域名地址包含一个或两个&quot;.&quot;符号。输入中任意一个域名的访问次数都小于10000。 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/subdomain-visit-count著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 标签 哈希表 解题思路 将 “900 google.mail.com” 拆成次数 num 900 和 url ‘google.mail.com’ 再把 url 按 ‘.’ 拆开，每级域名访问次数都是 num 900[‘google.mail.com’, ‘mail.com’, ‘com’] 遍历数组，把拆分的子域名存到哈希表里 key-&gt;域名 value-&gt;num，如果哈希表里有就把哈希表里的 num 和现在的 num 相加 拼接返回值123456789101112131415161718192021222324252627282930/** * @param &#123;string[]&#125; cpdomains * @return &#123;string[]&#125; */var subdomainVisits = function(cpdomains) &#123; let map = new Map() let res = [] for(let i = 0; i &lt; cpdomains.length; i++) &#123; let [num, url] = cpdomains[i].split(' ') while(url.includes('.'))&#123; if(map.has(url))&#123; map.set(url, (Number(map.get(url)) + Number(num))) &#125; else &#123; map.set(url, num) &#125; url = url.slice(url.indexOf('.') + 1) &#125; if(map.has(url))&#123; map.set(url, (Number(map.get(url)) + Number(num))) &#125; else &#123; map.set(url, num) &#125; &#125; map.forEach((value, key) =&gt; &#123; res.push(`$&#123;value&#125; $&#123;key&#125;`) &#125;) return res&#125;;","content":"<!--\n * @File: \n * @Author: 张宏亮 - zhl@xiaoniren.cn\n * @Date: 2019-08-09 23:03:47\n * @LastEditors: 张宏亮<zhl@xiaoniren.cn>\n * @LastEditTime: 2019-08-10 00:36:23\n * @Description: file content\n * @Versions: 1.0.0\n -->\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>一个网站域名，如”discuss.leetcode.com”，包含了多个子域名。作为顶级域名，常用的有”com”，下一级则有”leetcode.com”，最低的一级为”discuss.leetcode.com”。当我们访问域名”discuss.leetcode.com”时，也同时访问了其父域名”leetcode.com”以及顶级域名 “com”。</p>\n<p>给定一个带访问次数和域名的组合，要求分别计算每个域名被访问的次数。其格式为访问次数+空格+地址，例如：”9001 discuss.leetcode.com”。</p>\n<p>接下来会给出一组访问次数和域名组合的列表cpdomains 。要求解析出所有域名的访问次数，输出格式和输入格式相同，不限定先后顺序。</p>\n<p>示例 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: </span><br><span class=\"line\">[&quot;9001 discuss.leetcode.com&quot;]</span><br><span class=\"line\">输出: </span><br><span class=\"line\">[&quot;9001 discuss.leetcode.com&quot;, &quot;9001 leetcode.com&quot;, &quot;9001 com&quot;]</span><br></pre></td></tr></table></figure></p>\n<p>说明:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例子中仅包含一个网站域名：&quot;discuss.leetcode.com&quot;。按照前文假设，子域名&quot;leetcode.com&quot;和&quot;com&quot;都会被访问，所以它们都被访问了9001次。</span><br></pre></td></tr></table></figure></p>\n<p>示例 2<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: </span><br><span class=\"line\">[&quot;900 google.mail.com&quot;, &quot;50 yahoo.com&quot;, &quot;1 intel.mail.com&quot;, &quot;5 wiki.org&quot;]</span><br><span class=\"line\">输出: </span><br><span class=\"line\">[&quot;901 mail.com&quot;,&quot;50 yahoo.com&quot;,&quot;900 google.mail.com&quot;,&quot;5 wiki.org&quot;,&quot;5 org&quot;,&quot;1 intel.mail.com&quot;,&quot;951 com&quot;]</span><br></pre></td></tr></table></figure></p>\n<p>说明:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">按照假设，会访问&quot;google.mail.com&quot; 900次，&quot;yahoo.com&quot; 50次，&quot;intel.mail.com&quot; 1次，&quot;wiki.org&quot; 5次。</span><br><span class=\"line\">而对于父域名，会访问&quot;mail.com&quot; 900+1 = 901次，&quot;com&quot; 900 + 50 + 1 = 951次，和 &quot;org&quot; 5 次。</span><br></pre></td></tr></table></figure></p>\n<p>注意事项：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cpdomains 的长度小于 100。</span><br><span class=\"line\">每个域名的长度小于100。</span><br><span class=\"line\">每个域名地址包含一个或两个&quot;.&quot;符号。</span><br><span class=\"line\">输入中任意一个域名的访问次数都小于10000。</span><br></pre></td></tr></table></figure></p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/subdomain-visit-count\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/subdomain-visit-count</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<p>标签 <strong>哈希表</strong></p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><ol>\n<li>将 “900 google.mail.com” 拆成次数 num 900 和 url ‘google.mail.com’</li>\n<li>再把 url 按 ‘.’ 拆开，每级域名访问次数都是 num 900<br>[‘google.mail.com’, ‘mail.com’, ‘com’]</li>\n<li>遍历数组，把拆分的子域名存到哈希表里 key-&gt;域名 value-&gt;num，如果哈希表里有就把哈希表里的 num 和现在的 num 相加</li>\n<li>拼接返回值<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string[]&#125;</span> <span class=\"variable\">cpdomains</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> subdomainVisits = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cpdomains</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; cpdomains.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> [num, url] = cpdomains[i].split(<span class=\"string\">' '</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(url.includes(<span class=\"string\">'.'</span>))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(map.has(url))&#123;</span><br><span class=\"line\">                map.set(url, (<span class=\"built_in\">Number</span>(map.get(url)) + <span class=\"built_in\">Number</span>(num)))</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                map.set(url, num)</span><br><span class=\"line\">            &#125;            </span><br><span class=\"line\">            url = url.slice(url.indexOf(<span class=\"string\">'.'</span>) + <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(map.has(url))&#123;</span><br><span class=\"line\">            map.set(url, (<span class=\"built_in\">Number</span>(map.get(url)) + <span class=\"built_in\">Number</span>(num)))</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            map.set(url, num)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    map.forEach(<span class=\"function\">(<span class=\"params\">value, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        res.push(<span class=\"string\">`<span class=\"subst\">$&#123;value&#125;</span> <span class=\"subst\">$&#123;key&#125;</span>`</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"leetcode.771.宝石与石头","text":"题目描述 给定字符串J 代表石头中宝石的类型，和字符串 S代表你拥有的石头。 S 中每个字符代表了一种你拥有的石头的类型，你想知道你拥有的石头中有多少是宝石。 J 中的字母不重复，J 和 S中的所有字符都是字母。字母区分大小写，因此”a”和”A”是不同类型的石头。 示例 1:12输入: J = &quot;aA&quot;, S = &quot;aAAbbbb&quot;输出: 3 示例 2:12输入: J = &quot;z&quot;, S = &quot;ZZ&quot;输出: 0 注意: S 和 J 最多含有50个字母。 J 中的字符不重复。 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/jewels-and-stones著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 标签 哈希表 标准的哈希集合题目，没啥说的。。123456789101112131415/** * @param &#123;string&#125; J * @param &#123;string&#125; S * @return &#123;number&#125; */var numJewelsInStones = function(J, S) &#123; let setJ = new Set(J) let res = 0 for(i = 0; i &lt; S.length; i++) &#123; if(setJ.has(S[i])) &#123; res += 1 &#125; &#125; return res&#125;;","content":"<!--\n * @File: \n * @Author: 张宏亮 - zhl@xiaoniren.cn\n * @Date: 2019-08-09 22:04:59\n * @LastEditors: 张宏亮<zhl@xiaoniren.cn>\n * @LastEditTime: 2019-08-09 22:06:27\n * @Description: file content\n * @Versions: 1.0.0\n -->\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p> 给定字符串J 代表石头中宝石的类型，和字符串 S代表你拥有的石头。 S 中每个字符代表了一种你拥有的石头的类型，你想知道你拥有的石头中有多少是宝石。</p>\n<p>J 中的字母不重复，J 和 S中的所有字符都是字母。字母区分大小写，因此”a”和”A”是不同类型的石头。</p>\n<p>示例 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: J = &quot;aA&quot;, S = &quot;aAAbbbb&quot;</span><br><span class=\"line\">输出: 3</span><br></pre></td></tr></table></figure></p>\n<p>示例 2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: J = &quot;z&quot;, S = &quot;ZZ&quot;</span><br><span class=\"line\">输出: 0</span><br></pre></td></tr></table></figure></p>\n<p>注意:</p>\n<p>S 和 J 最多含有50个字母。<br> J 中的字符不重复。</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/jewels-and-stones\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/jewels-and-stones</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<p>标签 <strong>哈希表</strong></p>\n<p>标准的哈希集合题目，没啥说的。。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">J</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">S</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> numJewelsInStones = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">J, S</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> setJ = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(J)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; S.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(setJ.has(S[i])) &#123;</span><br><span class=\"line\">            res += <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"leetcode.739.每日温度","text":"题目描述根据每日 气温 列表，请重新生成一个列表，对应位置的输入是你需要再等待多久温度才会升高超过该日的天数。如果之后都不会升高，请在该位置用 0 来代替。 例如，给定一个列表 temperatures = [73, 74, 75, 71, 69, 72, 76, 73]，你的输出应该是 [1, 1, 4, 2, 1, 1, 0, 0]。 提示：气温 列表长度的范围是 [1, 30000]。每个气温的值的均为华氏度，都是在 [30, 100] 范围内的整数。 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/daily-temperatures著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 标签 栈 哈希表 解法一：暴力法学算法之前的方法 12345678910111213141516171819202122232425262728/** * @param &#123;number[]&#125; T * @return &#123;number[]&#125; */var dailyTemperatures = function(T) &#123; let res = [] for(let i = 1; i &lt; T.length; i++) &#123; let stack = [T[i-1]] if(stack[0] &gt;= T[i]) &#123; let j = i while(stack[0] &gt;= T[j] &amp;&amp; j &lt;= T.length)&#123; stack.push(T[j]) j++ &#125; if(stack[0] &lt;= T[j] &amp;&amp; j &lt;= T.length) &#123; res.push(stack.length) &#125; else if(j =&gt; T.length ) &#123; res.push(0) &#125; &#125; else &#123; res.push(stack.length) &#125; &#125; res.push(0) return res&#125;; 解法二：单调递增栈先说单调栈， 单调栈就是栈内元素保持一定单调性（单调递增或单调递减）的栈。这里的单调递增或递减是指的从栈顶到栈底单调递增或递减。既然是栈，就满足后进先出的特点。 例如，现在有一个数组 [3, 4, 2, 6, 4, 5, 2, 3]，从左到右依次入栈，单调递增栈的实现。 1234567891011// 单调递增栈的实现let arr = [3, 4, 2, 6, 4, 5, 2, 3]let res = []for (let i = 0; i &lt; arr.length; i++) &#123; while (res.length &amp;&amp; res[res.length - 1] &lt; arr[i]) &#123; res.pop() &#125; res.push(arr[i])&#125;console.log(res) // [6, 5, 3] 将破坏栈单调性的元素都出栈，结果从栈顶到栈底单调递增或者递减。 了解了单调栈之后，再来看这道题。 维护一个单调递增栈，栈内存储气温数组 T 的 index 查看当前元素是否大于栈顶元素所对应的 T 的值，也就是 T[stack[stack.length - 1]] 如果大于，那说明找到需要等待的天数。如果不大于那说明还没到找到比这天高的温度。同时继续维护这个单调栈 如果大于，需要等待的天数就是当前数组 T 的下标减去单调栈顶对应的下标 循环完毕，还没有找到需要等待的天数，为0 12345678910111213141516171819/** * @param &#123;number[]&#125; T * @return &#123;number[]&#125; */var dailyTemperatures = function(T) &#123; let &#123; length &#125; = T let res = new Array(length).fill(0) let stack = [] for(let i = 0; i &lt; length; i++) &#123; while(stack.length &amp;&amp; T[i] &gt; T[stack[stack.length - 1]]) &#123; let index = stack.pop() res[index] = i - index &#125; stack.push(i) &#125; return res&#125;; 解法三： 占坑","content":"<!--\n * @File: \n * @Author: 张宏亮 - zhl@xiaoniren.cn\n * @Date: 2019-08-18 15:46:12\n * @LastEditors: 张宏亮<hongliang@yunshan.net>\n * @LastEditTime: 2019-09-22 23:43:38\n * @Description: file content\n * @Versions: 1.0.0\n -->\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>根据每日 气温 列表，请重新生成一个列表，对应位置的输入是你需要再等待多久温度才会升高超过该日的天数。如果之后都不会升高，请在该位置用 0 来代替。</p>\n<p>例如，给定一个列表 temperatures = [73, 74, 75, 71, 69, 72, 76, 73]，你的输出应该是 [1, 1, 4, 2, 1, 1, 0, 0]。</p>\n<p>提示：气温 列表长度的范围是 [1, 30000]。每个气温的值的均为华氏度，都是在 [30, 100] 范围内的整数。</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/daily-temperatures\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/daily-temperatures</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<p>标签 <strong>栈</strong> <strong>哈希表</strong></p>\n<h3 id=\"解法一：暴力法\"><a href=\"#解法一：暴力法\" class=\"headerlink\" title=\"解法一：暴力法\"></a>解法一：暴力法</h3><p>学算法之前的方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">T</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> dailyTemperatures = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">T</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = []</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; T.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> stack = [T[i<span class=\"number\">-1</span>]]</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(stack[<span class=\"number\">0</span>] &gt;= T[i]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> j = i</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(stack[<span class=\"number\">0</span>] &gt;= T[j] &amp;&amp; j &lt;= T.length)&#123;</span><br><span class=\"line\">                stack.push(T[j])</span><br><span class=\"line\">                j++</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(stack[<span class=\"number\">0</span>] &lt;= T[j] &amp;&amp; j &lt;= T.length) &#123;</span><br><span class=\"line\">                res.push(stack.length)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"function\"><span class=\"params\">j</span> =&gt;</span> T.length ) &#123;</span><br><span class=\"line\">                res.push(<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            res.push(stack.length)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res.push(<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解法二：单调递增栈\"><a href=\"#解法二：单调递增栈\" class=\"headerlink\" title=\"解法二：单调递增栈\"></a>解法二：单调递增栈</h3><p>先说单调栈，</p>\n<p>单调栈就是栈内元素保持一定单调性（单调递增或单调递减）的栈。这里的单调递增或递减是指的从<strong>栈顶</strong>到<strong>栈底</strong>单调递增或递减。既然是栈，就满足后进先出的特点。</p>\n<p>例如，现在有一个数组 [3, 4, 2, 6, 4, 5, 2, 3]，从左到右依次入栈，单调递增栈的实现。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 单调递增栈的实现</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> res = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (res.length &amp;&amp; res[res.length - <span class=\"number\">1</span>] &lt; arr[i]) &#123;</span><br><span class=\"line\">        res.pop()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res.push(arr[i])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(res)   <span class=\"comment\">// [6, 5, 3]</span></span><br></pre></td></tr></table></figure>\n<p>将破坏栈单调性的元素都出栈，结果从栈顶到栈底单调递增或者递减。</p>\n<p>了解了单调栈之后，再来看这道题。</p>\n<ol>\n<li>维护一个单调递增栈，栈内存储气温数组 T 的 index</li>\n<li>查看当前元素是否大于栈顶元素所对应的 T 的值，也就是 T[stack[stack.length - 1]]</li>\n<li>如果大于，那说明找到需要等待的天数。如果不大于那说明还没到找到比这天高的温度。同时继续维护这个单调栈</li>\n<li>如果大于，需要等待的天数就是当前数组 T 的下标减去单调栈顶对应的下标</li>\n<li>循环完毕，还没有找到需要等待的天数，为0</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">T</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> dailyTemperatures = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">T</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; length &#125; = T</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(length).fill(<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> stack = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(stack.length &amp;&amp; T[i] &gt; T[stack[stack.length - <span class=\"number\">1</span>]]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> index = stack.pop()</span><br><span class=\"line\">            res[index] = i - index</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        stack.push(i)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解法三：-占坑\"><a href=\"#解法三：-占坑\" class=\"headerlink\" title=\"解法三： 占坑\"></a>解法三： 占坑</h3>"},{"title":"leetcode.706.设计哈希映射","text":"题目描述不使用任何内建的哈希表库设计一个哈希集合 具体地说，你的设计应该包含以下的功能 add(value)：向哈希集合中插入一个值。 contains(value) ：返回哈希集合中是否存在这个值。 emove(value)：将给定值从哈希集合中删除。如果哈希集合中没有这个值，什么也不做。 示例:123456789MyHashSet hashSet = new MyHashSet();hashSet.add(1); hashSet.add(2); hashSet.contains(1); // 返回 truehashSet.contains(3); // 返回 false (未找到)hashSet.add(2); hashSet.contains(2); // 返回 truehashSet.remove(2); hashSet.contains(2); // 返回 false (已经被删除) 注意： 所有的值都在 [1, 1000000]的范围内。 操作的总数目在[1, 10000]范围内。 不要使用内建的哈希集合库。 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/design-hashset著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 标签 设计 哈希表 js的对象本来就是哈希结构，而且也没涉及哈希函数的处理，没啥说的。。。 哈希函数的处理和封装，占坑，后补。 123456789101112131415161718192021222324252627282930313233343536373839/** * Initialize your data structure here. */var MyHashSet = function() &#123; this.hash = &#123;&#125;&#125;;/** * @param &#123;number&#125; key * @return &#123;void&#125; */MyHashSet.prototype.add = function(key) &#123; this.hash[key] = key&#125;;/** * @param &#123;number&#125; key * @return &#123;void&#125; */MyHashSet.prototype.remove = function(key) &#123; delete this.hash[key]&#125;;/** * Returns true if this set contains the specified element * @param &#123;number&#125; key * @return &#123;boolean&#125; */MyHashSet.prototype.contains = function(key) &#123; return (this.hash[key] != null)&#125;;/** * Your MyHashSet object will be instantiated and called as such: * var obj = new MyHashSet() * obj.add(key) * obj.remove(key) * var param_3 = obj.contains(key) */","content":"<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>不使用任何内建的哈希表库设计一个哈希集合</p>\n<p>具体地说，你的设计应该包含以下的功能</p>\n<ul>\n<li>add(value)：向哈希集合中插入一个值。</li>\n<li>contains(value) ：返回哈希集合中是否存在这个值。</li>\n<li>emove(value)：将给定值从哈希集合中删除。如果哈希集合中没有这个值，什么也不做。</li>\n</ul>\n<p>示例:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyHashSet hashSet = new MyHashSet();</span><br><span class=\"line\">hashSet.add(1);         </span><br><span class=\"line\">hashSet.add(2);         </span><br><span class=\"line\">hashSet.contains(1);    // 返回 true</span><br><span class=\"line\">hashSet.contains(3);    // 返回 false (未找到)</span><br><span class=\"line\">hashSet.add(2);          </span><br><span class=\"line\">hashSet.contains(2);    // 返回 true</span><br><span class=\"line\">hashSet.remove(2);          </span><br><span class=\"line\">hashSet.contains(2);    // 返回  false (已经被删除)</span><br></pre></td></tr></table></figure></p>\n<p>注意：</p>\n<ul>\n<li>所有的值都在 [1, 1000000]的范围内。</li>\n<li>操作的总数目在[1, 10000]范围内。</li>\n<li>不要使用内建的哈希集合库。</li>\n</ul>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/design-hashset\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/design-hashset</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<p>标签 <strong>设计</strong> <strong>哈希表</strong></p>\n<p>js的对象本来就是哈希结构，而且也没涉及哈希函数的处理，没啥说的。。。</p>\n<p>哈希函数的处理和封装，占坑，后补。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> MyHashSet = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.hash = &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">key</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">MyHashSet.prototype.add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.hash[key] = key</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">key</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">MyHashSet.prototype.remove = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>.hash[key]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Returns true if this set contains the specified element </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">key</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">MyHashSet.prototype.contains = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">this</span>.hash[key] != <span class=\"literal\">null</span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * Your MyHashSet object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"> * var obj = new MyHashSet()</span></span><br><span class=\"line\"><span class=\"comment\"> * obj.add(key)</span></span><br><span class=\"line\"><span class=\"comment\"> * obj.remove(key)</span></span><br><span class=\"line\"><span class=\"comment\"> * var param_3 = obj.contains(key)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>"},{"title":"leetcode.705.设计哈希集合","text":"题目描述不使用任何内建的哈希表库设计一个哈希集合 具体地说，你的设计应该包含以下的功能 add(value)：向哈希集合中插入一个值。 contains(value) ：返回哈希集合中是否存在这个值。 emove(value)：将给定值从哈希集合中删除。如果哈希集合中没有这个值，什么也不做。 示例:123456789MyHashSet hashSet = new MyHashSet();hashSet.add(1); hashSet.add(2); hashSet.contains(1); // 返回 truehashSet.contains(3); // 返回 false (未找到)hashSet.add(2); hashSet.contains(2); // 返回 truehashSet.remove(2); hashSet.contains(2); // 返回 false (已经被删除) 注意： 所有的值都在 [1, 1000000]的范围内。 操作的总数目在[1, 10000]范围内。 不要使用内建的哈希集合库。 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/design-hashset著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 标签 设计 哈希表 js的对象本来就是哈希结构，而且也没涉及哈希函数的处理，没啥说的。。。 哈希函数的处理和封装，占坑，后补。 123456789101112131415161718192021222324252627282930313233343536373839/** * Initialize your data structure here. */var MyHashSet = function() &#123; this.hash = &#123;&#125;&#125;;/** * @param &#123;number&#125; key * @return &#123;void&#125; */MyHashSet.prototype.add = function(key) &#123; this.hash[key] = key&#125;;/** * @param &#123;number&#125; key * @return &#123;void&#125; */MyHashSet.prototype.remove = function(key) &#123; delete this.hash[key]&#125;;/** * Returns true if this set contains the specified element * @param &#123;number&#125; key * @return &#123;boolean&#125; */MyHashSet.prototype.contains = function(key) &#123; return (this.hash[key] != null)&#125;;/** * Your MyHashSet object will be instantiated and called as such: * var obj = new MyHashSet() * obj.add(key) * obj.remove(key) * var param_3 = obj.contains(key) */","content":"<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>不使用任何内建的哈希表库设计一个哈希集合</p>\n<p>具体地说，你的设计应该包含以下的功能</p>\n<ul>\n<li>add(value)：向哈希集合中插入一个值。</li>\n<li>contains(value) ：返回哈希集合中是否存在这个值。</li>\n<li>emove(value)：将给定值从哈希集合中删除。如果哈希集合中没有这个值，什么也不做。</li>\n</ul>\n<p>示例:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyHashSet hashSet = new MyHashSet();</span><br><span class=\"line\">hashSet.add(1);         </span><br><span class=\"line\">hashSet.add(2);         </span><br><span class=\"line\">hashSet.contains(1);    // 返回 true</span><br><span class=\"line\">hashSet.contains(3);    // 返回 false (未找到)</span><br><span class=\"line\">hashSet.add(2);          </span><br><span class=\"line\">hashSet.contains(2);    // 返回 true</span><br><span class=\"line\">hashSet.remove(2);          </span><br><span class=\"line\">hashSet.contains(2);    // 返回  false (已经被删除)</span><br></pre></td></tr></table></figure></p>\n<p>注意：</p>\n<ul>\n<li>所有的值都在 [1, 1000000]的范围内。</li>\n<li>操作的总数目在[1, 10000]范围内。</li>\n<li>不要使用内建的哈希集合库。</li>\n</ul>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/design-hashset\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/design-hashset</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<p>标签 <strong>设计</strong> <strong>哈希表</strong></p>\n<p>js的对象本来就是哈希结构，而且也没涉及哈希函数的处理，没啥说的。。。</p>\n<p>哈希函数的处理和封装，占坑，后补。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> MyHashSet = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.hash = &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">key</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">MyHashSet.prototype.add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.hash[key] = key</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">key</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">MyHashSet.prototype.remove = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>.hash[key]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Returns true if this set contains the specified element </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">key</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">MyHashSet.prototype.contains = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">this</span>.hash[key] != <span class=\"literal\">null</span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * Your MyHashSet object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"> * var obj = new MyHashSet()</span></span><br><span class=\"line\"><span class=\"comment\"> * obj.add(key)</span></span><br><span class=\"line\"><span class=\"comment\"> * obj.remove(key)</span></span><br><span class=\"line\"><span class=\"comment\"> * var param_3 = obj.contains(key)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>"},{"title":"leetcode.648.单词替换","text":"题目描述在英语中，我们有一个叫做 词根(root)的概念，它可以跟着其他一些词组成另一个较长的单词——我们称这个词为 继承词(successor)。例如，词根an，跟随着单词 other(其他)，可以形成新的单词 another(另一个)。 现在，给定一个由许多词根组成的词典和一个句子。你需要将句子中的所有继承词用词根替换掉。如果继承词有许多可以形成它的词根，则用最短的词根替换它。 你需要输出替换之后的句子。 示例 1:123输入: dict(词典) = [&quot;cat&quot;, &quot;bat&quot;, &quot;rat&quot;]sentence(句子) = &quot;the cattle was rattled by the battery&quot;输出: &quot;the cat was rat by the bat&quot; 注:12345输入只包含小写字母。1 &lt;= 字典单词数 &lt;=10001 &lt;= 句中词语数 &lt;= 10001 &lt;= 词根长度 &lt;= 1001 &lt;= 句中词语长度 &lt;= 1000 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/replace-words著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 标签 字典树 哈希表 解法一：没啥意义的直接解法时间复杂度O(n^2) 虽然没啥意义，不过结果看起来还不错。123执行结果：通过 显示详情执行用时 : 168 ms, 在所有 JavaScript 提交中击败了 91.67% 的用户内存消耗 : 40.7 MB, 在所有 JavaScript 提交中击败了 100.00% 的用户 1234567891011121314151617/** * @param &#123;string[]&#125; dict * @param &#123;string&#125; sentence * @return &#123;string&#125; */var replaceWords = function(dict, sentence) &#123; let words = sentence.split(' ') for(let i = 0; i &lt; words.length; i++) &#123; for(let j = 0; j &lt; dict.length; j++) &#123; if(words[i].startsWith(dict[j]))&#123; words[i] = dict[j] continue &#125; &#125; &#125; return words.join(' ')&#125;; 解法二：字典树开始用字母对应下标写的 children。 后来看到标签为字典树和哈希表。。 又改成哈希了。2333 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576/** * @param &#123;string[]&#125; dict * @param &#123;string&#125; sentence * @return &#123;string&#125; *//** * Trie */class Trie &#123; constructor() &#123; this.root = new TrieNode(null) &#125; insertData(stringData) &#123; this.insert(stringData, this.root) &#125; insert(stringData, node) &#123; if (stringData == '') &#123; node.done = true return &#125; // 题目里都是单词，只有26个字母。用字母的 ASCII 码减 a 的 ASCII 码正好对应0-25 // const index = stringData[0].charCodeAt(0) - 'a'.charCodeAt(0) let haveData = node.children.get(stringData[0]) if (haveData) &#123; this.insert(stringData.substring(1), haveData) &#125; else &#123; let newNode = new TrieNode(stringData[0]) // node.children[index] = newNode node.children.set(stringData[0], newNode) this.insert(stringData.substring(1), newNode) &#125; &#125; search(stringData) &#123; let node = this.root let res = '' for (let i = 0; i &lt; stringData.length; i++) &#123; // cattle const element = stringData[i] // const index = element.charCodeAt(0) - 'a'.charCodeAt(0) const target = node.children.get(element) if (node.done) &#123; break &#125; else if (target) &#123; res += target.key node = target &#125; else &#123; res = '' break &#125; &#125; return res &#125;&#125;/** * 节点 * @param &#123;*&#125; key */class TrieNode &#123; constructor(key) &#123; this.key = key // 节点字符 this.children = new Map() // 子节点集合 &#125;&#125;var replaceWords = function(dict, sentence) &#123; const trie = new Trie(); for(let i = 0; i &lt; dict.length; i++) &#123; trie.insertData(dict[i]); &#125; return sentence.split(' ').map(wrod =&gt; trie.search(wrod) || wrod).join(' ');&#125;; 字典树资料","content":"<!--\n * @File: \n * @Author: 张宏亮 - zhl@xiaoniren.cn\n * @Date: 2019-08-09 23:03:47\n * @LastEditors: 张宏亮<zhl@xiaoniren.cn>\n * @LastEditTime: 2019-08-12 17:18:57\n * @Description: file content\n * @Versions: 1.0.0\n -->\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>在英语中，我们有一个叫做 词根(root)的概念，它可以跟着其他一些词组成另一个较长的单词——我们称这个词为 继承词(successor)。例如，词根an，跟随着单词 other(其他)，可以形成新的单词 another(另一个)。</p>\n<p>现在，给定一个由许多词根组成的词典和一个句子。你需要将句子中的所有继承词用词根替换掉。如果继承词有许多可以形成它的词根，则用最短的词根替换它。</p>\n<p>你需要输出替换之后的句子。</p>\n<p>示例 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: dict(词典) = [&quot;cat&quot;, &quot;bat&quot;, &quot;rat&quot;]</span><br><span class=\"line\">sentence(句子) = &quot;the cattle was rattled by the battery&quot;</span><br><span class=\"line\">输出: &quot;the cat was rat by the bat&quot;</span><br></pre></td></tr></table></figure></p>\n<p>注:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入只包含小写字母。</span><br><span class=\"line\">1 &lt;= 字典单词数 &lt;=1000</span><br><span class=\"line\">1 &lt;=  句中词语数 &lt;= 1000</span><br><span class=\"line\">1 &lt;= 词根长度 &lt;= 100</span><br><span class=\"line\">1 &lt;= 句中词语长度 &lt;= 1000</span><br></pre></td></tr></table></figure></p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/replace-words\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/replace-words</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<p>标签 <strong>字典树</strong> <strong>哈希表</strong> </p>\n<h3 id=\"解法一：没啥意义的直接解法\"><a href=\"#解法一：没啥意义的直接解法\" class=\"headerlink\" title=\"解法一：没啥意义的直接解法\"></a>解法一：没啥意义的直接解法</h3><p>时间复杂度O(n^2)</p>\n<p>虽然没啥意义，不过结果看起来还不错。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">执行结果：通过 显示详情</span><br><span class=\"line\">执行用时 : 168 ms, 在所有 JavaScript 提交中击败了 91.67% 的用户</span><br><span class=\"line\">内存消耗 : 40.7 MB, 在所有 JavaScript 提交中击败了 100.00% 的用户</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string[]&#125;</span> <span class=\"variable\">dict</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">sentence</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> replaceWords = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">dict, sentence</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> words = sentence.split(<span class=\"string\">' '</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; words.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; dict.length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(words[i].startsWith(dict[j]))&#123;</span><br><span class=\"line\">                words[i] = dict[j]</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> words.join(<span class=\"string\">' '</span>)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解法二：字典树\"><a href=\"#解法二：字典树\" class=\"headerlink\" title=\"解法二：字典树\"></a>解法二：字典树</h3><p>开始用字母对应下标写的 children。</p>\n<p>后来看到标签为字典树和哈希表。。</p>\n<p>又改成哈希了。2333</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string[]&#125;</span> <span class=\"variable\">dict</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">sentence</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * Trie</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Trie</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.root = <span class=\"keyword\">new</span> TrieNode(<span class=\"literal\">null</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  insertData(stringData) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.insert(stringData, <span class=\"keyword\">this</span>.root)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  insert(stringData, node) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stringData == <span class=\"string\">''</span>) &#123;</span><br><span class=\"line\">      node.done = <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 题目里都是单词，只有26个字母。用字母的 ASCII 码减 a 的 ASCII 码正好对应0-25</span></span><br><span class=\"line\">    <span class=\"comment\">// const index = stringData[0].charCodeAt(0) - 'a'.charCodeAt(0)</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> haveData = node.children.get(stringData[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (haveData) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.insert(stringData.substring(<span class=\"number\">1</span>), haveData)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> newNode = <span class=\"keyword\">new</span> TrieNode(stringData[<span class=\"number\">0</span>])</span><br><span class=\"line\">      <span class=\"comment\">// node.children[index] = newNode</span></span><br><span class=\"line\">      node.children.set(stringData[<span class=\"number\">0</span>], newNode)</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.insert(stringData.substring(<span class=\"number\">1</span>), newNode)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  search(stringData) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> node = <span class=\"keyword\">this</span>.root</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"string\">''</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; stringData.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// cattle</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> element = stringData[i]</span><br><span class=\"line\">      <span class=\"comment\">// const index = element.charCodeAt(0) - 'a'.charCodeAt(0)</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> target = node.children.get(element)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (node.done) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target) &#123;</span><br><span class=\"line\">        res += target.key</span><br><span class=\"line\">        node = target</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        res = <span class=\"string\">''</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 节点</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param <span class=\"type\">&#123;*&#125;</span> <span class=\"variable\">key</span></span></span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TrieNode</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(key) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.key = key <span class=\"comment\">// 节点字符</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.children = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>() <span class=\"comment\">// 子节点集合</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> replaceWords = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">dict, sentence</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> trie = <span class=\"keyword\">new</span> Trie();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; dict.length; i++) &#123;</span><br><span class=\"line\">          trie.insertData(dict[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> sentence.split(<span class=\"string\">' '</span>).map(<span class=\"function\"><span class=\"params\">wrod</span> =&gt;</span> trie.search(wrod) || wrod).join(<span class=\"string\">' '</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>字典树资料</p>\n"},{"title":"leetcode.599.两个列表的最小索引总和","text":"题目描述假设Andy和Doris想在晚餐时选择一家餐厅，并且他们都有一个表示最喜爱餐厅的列表，每个餐厅的名字用字符串表示。 你需要帮助他们用最少的索引和找出他们共同喜爱的餐厅。 如果答案不止一个，则输出所有答案并且不考虑顺序。 你可以假设总是存在一个答案。 示例 1:12345输入:[&quot;Shogun&quot;, &quot;Tapioca Express&quot;, &quot;Burger King&quot;, &quot;KFC&quot;][&quot;Piatti&quot;, &quot;The Grill at Torrey Pines&quot;, &quot;Hungry Hunter Steakhouse&quot;, &quot;Shogun&quot;]输出: [&quot;Shogun&quot;]解释: 他们唯一共同喜爱的餐厅是“Shogun”。 示例 2:12345输入:[&quot;Shogun&quot;, &quot;Tapioca Express&quot;, &quot;Burger King&quot;, &quot;KFC&quot;][&quot;KFC&quot;, &quot;Shogun&quot;, &quot;Burger King&quot;]输出: [&quot;Shogun&quot;]解释: 他们共同喜爱且具有最小索引和的餐厅是“Shogun”，它有最小的索引和1(0+1)。 提示: 两个列表的长度范围都在 [1, 1000]内。 两个列表中的字符串的长度将在[1，30]的范围内。 下标从0开始，到列表的长度减1。 两个列表都没有重复的元素。 标签 哈希表 https://leetcode-cn.com/problems/minimum-index-sum-of-two-lists/ 解题思路根据提示两个列表都没有重复的元素。所以两个列表同一餐厅最多出现两次。所以只要比较出现两次的餐厅的下标和就可以。如果下标和小就当作返回值，如果下标和相等，就push到返回值里。 123456789101112131415161718192021222324252627282930/** * @param &#123;string[]&#125; list1 * @param &#123;string[]&#125; list2 * @return &#123;string[]&#125; */var findRestaurant = function(list1, list2) &#123; let res = [] let indexSum let hash = new Map() for(let i = 0; i &lt; list1.length; i++) &#123; hash.set(list1[i], i) &#125; for(let i = 0; i &lt; list2.length; i++) &#123; if(hash.has(list2[i])) &#123; if(typeof indexSum === 'undefined') &#123; indexSum = hash.get(list2[i]) + i res = [list2[i]] &#125; else &#123; if(indexSum &gt; hash.get(list2[i]) + i) &#123; indexSum = hash.get(list2[i]) + i res = [list2[i]] &#125; else if(indexSum == hash.get(list2[i]) + i)&#123; res.push(list2[i]) &#125; &#125; &#125; &#125; return res&#125;;","content":"<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>假设Andy和Doris想在晚餐时选择一家餐厅，并且他们都有一个表示最喜爱餐厅的列表，每个餐厅的名字用字符串表示。</p>\n<p>你需要帮助他们用最少的索引和找出他们共同喜爱的餐厅。 如果答案不止一个，则输出所有答案并且不考虑顺序。 你可以假设总是存在一个答案。</p>\n<p>示例 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入:</span><br><span class=\"line\">[&quot;Shogun&quot;, &quot;Tapioca Express&quot;, &quot;Burger King&quot;, &quot;KFC&quot;]</span><br><span class=\"line\">[&quot;Piatti&quot;, &quot;The Grill at Torrey Pines&quot;, &quot;Hungry Hunter Steakhouse&quot;, &quot;Shogun&quot;]</span><br><span class=\"line\">输出: [&quot;Shogun&quot;]</span><br><span class=\"line\">解释: 他们唯一共同喜爱的餐厅是“Shogun”。</span><br></pre></td></tr></table></figure></p>\n<p>示例 2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入:</span><br><span class=\"line\">[&quot;Shogun&quot;, &quot;Tapioca Express&quot;, &quot;Burger King&quot;, &quot;KFC&quot;]</span><br><span class=\"line\">[&quot;KFC&quot;, &quot;Shogun&quot;, &quot;Burger King&quot;]</span><br><span class=\"line\">输出: [&quot;Shogun&quot;]</span><br><span class=\"line\">解释: 他们共同喜爱且具有最小索引和的餐厅是“Shogun”，它有最小的索引和1(0+1)。</span><br></pre></td></tr></table></figure></p>\n<p>提示:</p>\n<ul>\n<li>两个列表的长度范围都在 [1, 1000]内。</li>\n<li>两个列表中的字符串的长度将在[1，30]的范围内。</li>\n<li>下标从0开始，到列表的长度减1。</li>\n<li>两个列表都没有重复的元素。</li>\n</ul>\n<p>标签 <strong>哈希表</strong></p>\n<p><a href=\"https://leetcode-cn.com/problems/minimum-index-sum-of-two-lists/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/minimum-index-sum-of-two-lists/</a></p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>根据提示两个列表都没有重复的元素。<br>所以两个列表同一餐厅最多出现两次。<br>所以只要比较出现两次的餐厅的下标和就可以。<br>如果下标和小就当作返回值，如果下标和相等，就push到返回值里。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string[]&#125;</span> <span class=\"variable\">list1</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string[]&#125;</span> <span class=\"variable\">list2</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findRestaurant = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">list1, list2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = []</span><br><span class=\"line\">    <span class=\"keyword\">let</span> indexSum</span><br><span class=\"line\">    <span class=\"keyword\">let</span> hash = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; list1.length; i++) &#123;</span><br><span class=\"line\">        hash.set(list1[i], i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; list2.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(hash.has(list2[i])) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> indexSum === <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">                indexSum = hash.get(list2[i]) + i</span><br><span class=\"line\">                res = [list2[i]]</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(indexSum &gt; hash.get(list2[i]) + i) &#123;</span><br><span class=\"line\">                    indexSum = hash.get(list2[i]) + i</span><br><span class=\"line\">                    res = [list2[i]]</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(indexSum == hash.get(list2[i]) + i)&#123;</span><br><span class=\"line\">                    res.push(list2[i])</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"leetcode.535.TinyURL的加密与解密","text":"题目描述TinyURL是一种URL简化服务， 比如：当你输入一个URL https://leetcode.com/problems/design-tinyurl 时，它将返回一个简化的URL http://tinyurl.com/4e9iAk. 要求：设计一个 TinyURL 的加密 encode 和解密 decode 的方法。你的加密和解密算法如何设计和运作是没有限制的，你只需要保证一个URL可以被加密成一个TinyURL，并且这个TinyURL可以用解密方法恢复成原本的URL。 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/encode-and-decode-tinyurl著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 标签 哈希表 数学 短网址原理当我们在浏览器里输入 http://tinyurl.com/4e9iAk 时 DNS首先解析获得 http://tinyurl.com 的 IP 地址 当 DNS 获得 IP 地址以后（比如：74.125.225.72），会向这个地址发送 HTTP GET 请求，查询短码 4e9iAk http://t.cn 服务器会通过短码 4e9iAk 获取对应的长 URL 请求通过 HTTP 301 转到对应的长 URL https://leetcode.com/problems/design-tinyurl 。 301 是永久重定向，302 是临时重定向。短地址一经生成就不会变化，所以用 301 是符合 http 语义的。 短网址算法这道题的标签是 哈希表，数学。哈希表不用说了，肯定得把短网址映射到长网址上。 数学 网上比较流行的短网址算法有两种 自增序列算法、 摘要算法。 这里我们用自增序列算法，比较好理解。 设置 id 自增，一个 10进制 id 对应一个 62进制的数值，1对1，也就不会出现重复的情况。这个利用的就是低进制转化为高进制时，字符数会减少的特性。 短址的长度一般设为 6 位，总共会有 64^6 ~= 687亿种组合，基本上不会重复。 123456789101112131415161718192021222324252627282930313233343536373839404142434445/** * Encodes a URL to a shortened URL. * * @param &#123;string&#125; longUrl * @return &#123;string&#125; */let hash = new Map()var encode = function(longUrl) &#123; let chars = '0123456789abcdefghigklmnopqrstuvwxyzABCDEFGHIGKLMNOPQRSTUVWXYZ-~'.split(''), radix = chars.length, qutient = 10000000000, arr = []; do &#123; mod = qutient % radix; qutient = (qutient - mod) / radix; arr.unshift(chars[mod]); &#125; while (qutient); hash.set(arr.join(''),longUrl) return 'http://tinyurl.com/' + arr.join('')&#125;;/** * Decodes a shortened URL to its original URL. * * @param &#123;string&#125; shortUrl * @return &#123;string&#125; */var decode = function(shortUrl) &#123; // var chars = '0123456789abcdefghigklmnopqrstuvwxyzABCDEFGHIGKLMNOPQRSTUVWXYZ-~', // radix = chars.length, // number_code = String(number_code), // len = number_code.length, // i = 0, // origin_number = 0; // while (i &lt; len) &#123; // origin_number += Math.pow(radix, i++) * chars.indexOf(number_code.charAt(len - i) || 0); // &#125; shortUrl = shortUrl.replace(/http:\\/\\/tinyurl\\.com\\//,'') return hash.get(shortUrl)&#125;;/** * Your functions will be called as such: * decode(encode(url)); */ 这种方法是设置一个 id ，然后对 id 进行编码，然后用编码后的 id 进行映射。 另一种摘要算法，是直接对 longUrl 编码。","content":"<!--\n * @File: \n * @Author: 张宏亮 - zhl@xiaoniren.cn\n * @Date: 2019-08-09 23:03:47\n * @LastEditors: 张宏亮<zhl@xiaoniren.cn>\n * @LastEditTime: 2019-08-10 15:57:50\n * @Description: file content\n * @Versions: 1.0.0\n -->\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>TinyURL是一种URL简化服务， 比如：当你输入一个URL <a href=\"https://leetcode.com/problems/design-tinyurl\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problems/design-tinyurl</a> 时，它将返回一个简化的URL <a href=\"http://tinyurl.com/4e9iAk\" target=\"_blank\" rel=\"noopener\">http://tinyurl.com/4e9iAk</a>.</p>\n<p>要求：设计一个 TinyURL 的加密 encode 和解密 decode 的方法。你的加密和解密算法如何设计和运作是没有限制的，你只需要保证一个URL可以被加密成一个TinyURL，并且这个TinyURL可以用解密方法恢复成原本的URL。</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/encode-and-decode-tinyurl\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/encode-and-decode-tinyurl</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<p>标签 <strong>哈希表</strong> <strong>数学</strong></p>\n<h3 id=\"短网址原理\"><a href=\"#短网址原理\" class=\"headerlink\" title=\"短网址原理\"></a>短网址原理</h3><p>当我们在浏览器里输入 <a href=\"http://tinyurl.com/4e9iAk\" target=\"_blank\" rel=\"noopener\">http://tinyurl.com/4e9iAk</a> 时</p>\n<ol>\n<li>DNS首先解析获得 <a href=\"http://tinyurl.com\" target=\"_blank\" rel=\"noopener\">http://tinyurl.com</a> 的 IP 地址</li>\n<li>当 DNS 获得 IP 地址以后（比如：74.125.225.72），会向这个地址发送 HTTP GET 请求，查询短码 4e9iAk</li>\n<li><a href=\"http://t.cn\" target=\"_blank\" rel=\"noopener\">http://t.cn</a> 服务器会通过短码 4e9iAk 获取对应的长 URL</li>\n<li>请求通过 HTTP 301 转到对应的长 URL <a href=\"https://leetcode.com/problems/design-tinyurl\" target=\"_blank\" rel=\"noopener\">https://leetcode.com/problems/design-tinyurl</a> 。<blockquote>\n<p>301 是永久重定向，302 是临时重定向。短地址一经生成就不会变化，所以用 301 是符合 http 语义的。</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"短网址算法\"><a href=\"#短网址算法\" class=\"headerlink\" title=\"短网址算法\"></a>短网址算法</h3><p>这道题的标签是 哈希表，数学。哈希表不用说了，肯定得把短网址映射到长网址上。</p>\n<p>数学 网上比较流行的短网址算法有两种 自增序列算法、 摘要算法。</p>\n<p>这里我们用自增序列算法，比较好理解。</p>\n<p>设置 id 自增，一个 10进制 id 对应一个 62进制的数值，1对1，也就不会出现重复的情况。这个利用的就是低进制转化为高进制时，字符数会减少的特性。</p>\n<p>短址的长度一般设为 6 位，总共会有 64^6 ~= 687亿种组合，基本上不会重复。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Encodes a URL to a shortened URL.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">longUrl</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> hash = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\"><span class=\"keyword\">var</span> encode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">longUrl</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> chars = <span class=\"string\">'0123456789abcdefghigklmnopqrstuvwxyzABCDEFGHIGKLMNOPQRSTUVWXYZ-~'</span>.split(<span class=\"string\">''</span>),</span><br><span class=\"line\">        radix = chars.length,</span><br><span class=\"line\">        qutient = <span class=\"number\">10000000000</span>,   </span><br><span class=\"line\">        arr = [];</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        mod = qutient % radix;</span><br><span class=\"line\">        qutient = (qutient - mod) / radix;</span><br><span class=\"line\">        arr.unshift(chars[mod]);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (qutient);</span><br><span class=\"line\">    hash.set(arr.join(<span class=\"string\">''</span>),longUrl)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'http://tinyurl.com/'</span> + arr.join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Decodes a shortened URL to its original URL.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">shortUrl</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> decode = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">shortUrl</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// var chars = '0123456789abcdefghigklmnopqrstuvwxyzABCDEFGHIGKLMNOPQRSTUVWXYZ-~',</span></span><br><span class=\"line\">    <span class=\"comment\">//     radix = chars.length,</span></span><br><span class=\"line\">    <span class=\"comment\">//     number_code = String(number_code),</span></span><br><span class=\"line\">    <span class=\"comment\">//     len = number_code.length,</span></span><br><span class=\"line\">    <span class=\"comment\">//     i = 0,</span></span><br><span class=\"line\">    <span class=\"comment\">//     origin_number = 0;</span></span><br><span class=\"line\">    <span class=\"comment\">// while (i &lt; len) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     origin_number += Math.pow(radix, i++) * chars.indexOf(number_code.charAt(len - i) || 0);</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    shortUrl = shortUrl.replace(<span class=\"regexp\">/http:\\/\\/tinyurl\\.com\\//</span>,<span class=\"string\">''</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hash.get(shortUrl)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Your functions will be called as such:</span></span><br><span class=\"line\"><span class=\"comment\"> * decode(encode(url));</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<p>这种方法是设置一个 id ，然后对 id 进行编码，然后用编码后的 id 进行映射。</p>\n<p>另一种摘要算法，是直接对 longUrl 编码。</p>\n"},{"title":"leetcode.500.键盘行","text":"题目描述给定一个单词列表，只返回可以使用在键盘同一行的字母打印出来的单词。键盘如下图所示。 示例：12输入: [&quot;Hello&quot;, &quot;Alaska&quot;, &quot;Dad&quot;, &quot;Peace&quot;]输出: [&quot;Alaska&quot;, &quot;Dad&quot;] 注意：12你可以重复使用键盘上同一字符。你可以假设输入的字符串将只包含字母。 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/keyboard-row著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 标签 哈希表 标签哈希表，建立好映射关系，每一行字母对应一个value。 然后遍历每个单词的每个字母是否在同一行，value 是否相同。 注意大小写。 123456789101112131415161718192021222324252627/** * @param &#123;string[]&#125; words * @return &#123;string[]&#125; */var findWords = function(words) &#123; let map = new Map([ ['q',1],['w',1],['e',1],['r',1],['t',1],['y',1],['u',1],['i',1],['o',1],['p',1], ['a',2],['s',2],['d',2],['f',2],['g',2],['h',2],['j',2],['k',2],['l',2], ['z',3],['x',3],['c',3],['v',3],['b',3],['n',3],['m',3] ]) let res = [] for(let i = 0; i &lt; words.length; i++) &#123; let word = words[i] let temp = map.get(word[0].toLowerCase()) for(let j = 0; j &lt; word.length; j++) &#123; if(temp == map.get(word[j].toLowerCase())) &#123; if (j == word.length - 1) &#123; res.push(word) &#125; &#125; else &#123; break &#125; &#125; &#125; return res&#125;;","content":"<!--\n * @File: \n * @Author: 张宏亮 - zhl@xiaoniren.cn\n * @Date: 2019-08-09 22:04:59\n * @LastEditors: 张宏亮<zhl@xiaoniren.cn>\n * @LastEditTime: 2019-08-09 22:55:16\n * @Description: file content\n * @Versions: 1.0.0\n -->\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定一个单词列表，只返回可以使用在键盘同一行的字母打印出来的单词。键盘如下图所示。</p>\n<p> <img src=\"https://raw.githubusercontent.com/zhl1232/javascript-algorithm/master/static/img/500.png\" alt=\"image\"></p>\n<p>示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [&quot;Hello&quot;, &quot;Alaska&quot;, &quot;Dad&quot;, &quot;Peace&quot;]</span><br><span class=\"line\">输出: [&quot;Alaska&quot;, &quot;Dad&quot;]</span><br></pre></td></tr></table></figure></p>\n<p>注意：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">你可以重复使用键盘上同一字符。</span><br><span class=\"line\">你可以假设输入的字符串将只包含字母。</span><br></pre></td></tr></table></figure></p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/keyboard-row\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/keyboard-row</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<p>标签 <strong>哈希表</strong></p>\n<p>标签哈希表，建立好映射关系，每一行字母对应一个value。</p>\n<p>然后遍历每个单词的每个字母是否在同一行，value 是否相同。</p>\n<p>注意大小写。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string[]&#125;</span> <span class=\"variable\">words</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> findWords = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">words</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">      [<span class=\"string\">'q'</span>,<span class=\"number\">1</span>],[<span class=\"string\">'w'</span>,<span class=\"number\">1</span>],[<span class=\"string\">'e'</span>,<span class=\"number\">1</span>],[<span class=\"string\">'r'</span>,<span class=\"number\">1</span>],[<span class=\"string\">'t'</span>,<span class=\"number\">1</span>],[<span class=\"string\">'y'</span>,<span class=\"number\">1</span>],[<span class=\"string\">'u'</span>,<span class=\"number\">1</span>],[<span class=\"string\">'i'</span>,<span class=\"number\">1</span>],[<span class=\"string\">'o'</span>,<span class=\"number\">1</span>],[<span class=\"string\">'p'</span>,<span class=\"number\">1</span>],</span><br><span class=\"line\">      [<span class=\"string\">'a'</span>,<span class=\"number\">2</span>],[<span class=\"string\">'s'</span>,<span class=\"number\">2</span>],[<span class=\"string\">'d'</span>,<span class=\"number\">2</span>],[<span class=\"string\">'f'</span>,<span class=\"number\">2</span>],[<span class=\"string\">'g'</span>,<span class=\"number\">2</span>],[<span class=\"string\">'h'</span>,<span class=\"number\">2</span>],[<span class=\"string\">'j'</span>,<span class=\"number\">2</span>],[<span class=\"string\">'k'</span>,<span class=\"number\">2</span>],[<span class=\"string\">'l'</span>,<span class=\"number\">2</span>],</span><br><span class=\"line\">      [<span class=\"string\">'z'</span>,<span class=\"number\">3</span>],[<span class=\"string\">'x'</span>,<span class=\"number\">3</span>],[<span class=\"string\">'c'</span>,<span class=\"number\">3</span>],[<span class=\"string\">'v'</span>,<span class=\"number\">3</span>],[<span class=\"string\">'b'</span>,<span class=\"number\">3</span>],[<span class=\"string\">'n'</span>,<span class=\"number\">3</span>],[<span class=\"string\">'m'</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">    ])</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; words.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> word =  words[i]</span><br><span class=\"line\">        <span class=\"keyword\">let</span> temp = map.get(word[<span class=\"number\">0</span>].toLowerCase())</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; word.length; j++) &#123;          </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp == map.get(word[j].toLowerCase())) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (j == word.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                  res.push(word)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"leetcode.387.字符串中的第一个唯一字符","text":"题目描述给定一个字符串，找到它的第一个不重复的字符，并返回它的索引。如果不存在，则返回 -1。 案例:12345s = &quot;leetcode&quot;返回 0.s = &quot;loveleetcode&quot;,返回 2. 注意事项：您可以假定该字符串只包含小写字母。 标签 哈希表 字符串 https://leetcode-cn.com/problems/first-unique-character-in-a-string/ 解题思路这道题最优的解法就是线性复杂度了，为了保证每个元素是唯一的，至少得把每个字符都遍历一遍。 算法的思路就是遍历一遍字符串，然后把字符串中每个字符出现的次数保存在一个散列表中。这个过程的时间复杂度为 O(N)，其中 N 为字符串的长度。 接下来需要再遍历一次字符串，这一次利用散列表来检查遍历的每个字符是不是唯一的。如果当前字符唯一，直接返回当前下标就可以了。第二次遍历的时间复杂度也是 O(N)。 正常哈希表写法，但因为语言实现的原因，速度比较慢。12345678910111213141516171819202122/** * @param &#123;string&#125; s * @return &#123;number&#125; */var firstUniqChar = function(s) &#123; let hash = new Map() for(let i = 0; i &lt; s.length; i++) &#123; if(hash.has(s[i])) &#123; hash.set(s[i], hash.get(s[i]) + 1) &#125; else &#123; hash.set(s[i], 1) &#125; &#125; for(let i = 0; i &lt; s.length; i++) &#123; if(hash.get(s[i]) == 1)&#123; return i &#125; &#125; return -1&#125;; 语言自带字符串api实现。indexOf从左找出现第一个，lastIndexOf从右找出现第一个。 如果两个下标一样，那说明这个值就是唯一字符。 字符串是从左到右遍历的，所以只要indexOf和lastIndexOf的下标一样，那说明这个值就是字符串中的第一个唯一字符1234567891011121314/** * @param &#123;string&#125; s * @return &#123;number&#125; */var firstUniqChar = function(s) &#123; let temp for (let i = 0; i &lt; s.length; i++) &#123; temp = s[i] if (s.indexOf(temp) === i &amp;&amp; s.lastIndexOf(temp) === i) &#123; return i &#125; &#125; return -1&#125;;","content":"<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定一个字符串，找到它的第一个不重复的字符，并返回它的索引。如果不存在，则返回 -1。</p>\n<p>案例:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = &quot;leetcode&quot;</span><br><span class=\"line\">返回 0.</span><br><span class=\"line\"></span><br><span class=\"line\">s = &quot;loveleetcode&quot;,</span><br><span class=\"line\">返回 2.</span><br></pre></td></tr></table></figure></p>\n<p>注意事项：您可以假定该字符串只包含小写字母。</p>\n<p>标签 <strong>哈希表</strong> <strong>字符串</strong></p>\n<p><a href=\"https://leetcode-cn.com/problems/first-unique-character-in-a-string/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/first-unique-character-in-a-string/</a></p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>这道题最优的解法就是线性复杂度了，为了保证每个元素是唯一的，至少得把每个字符都遍历一遍。</p>\n<p>算法的思路就是遍历一遍字符串，然后把字符串中每个字符出现的次数保存在一个散列表中。这个过程的时间复杂度为 O(N)，其中 N 为字符串的长度。</p>\n<p>接下来需要再遍历一次字符串，这一次利用散列表来检查遍历的每个字符是不是唯一的。如果当前字符唯一，直接返回当前下标就可以了。第二次遍历的时间复杂度也是 O(N)。</p>\n<p>正常哈希表写法，但因为语言实现的原因，速度比较慢。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> firstUniqChar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> hash = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; s.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(hash.has(s[i])) &#123;</span><br><span class=\"line\">            hash.set(s[i], hash.get(s[i]) + <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            hash.set(s[i], <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; s.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(hash.get(s[i]) == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>语言自带字符串api实现。indexOf从左找出现第一个，lastIndexOf从右找出现第一个。</p>\n<p>如果两个下标一样，那说明这个值就是唯一字符。</p>\n<p>字符串是从左到右遍历的，所以只要indexOf和lastIndexOf的下标一样，那说明这个值就是字符串中的第一个唯一字符<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> firstUniqChar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> temp</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; s.length; i++) &#123;</span><br><span class=\"line\">    temp = s[i]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s.indexOf(temp) === i &amp;&amp; s.lastIndexOf(temp) === i) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> i</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"leetcode.350.两个数组的交集II","text":"题目描述给定两个数组，编写一个函数来计算它们的交集。 示例 1:12输入: nums1 = [1,2,2,1], nums2 = [2,2]输出: [2,2] 示例 2:12输入: nums1 = [4,9,5], nums2 = [9,4,9,8,4]输出: [4,9] 说明： 输出结果中每个元素出现的次数，应与元素在两个数组中出现的次数一致。 我们可以不考虑输出结果的顺序。 进阶: 如果给定的数组已经排好序呢？你将如何优化你的算法？ 如果 nums1 的大小比 nums2 小很多，哪种方法更优？ 如果 nums2 的元素存储在磁盘上，磁盘内存是有限的，并且你不能一次加载所有的元素到内存中，你该怎么办？ 标签 排序 哈希表 双指针 二分查找 https://leetcode-cn.com/problems/intersection-of-two-arrays-ii/ 解法一：哈希表时间复杂度O(n) 先用Hashmap记录第一个数组中的元素【放在key】，和出现的次数【放在value】。 然后再遍历第二个数组，如果找到对应元素，则添加这个元素到返回数组里。 如果value值大于1，HashMap中的value值减 1，表示已经找到一个相同的了。 如果value值等于1，则删除该元素。 12345678910111213141516171819202122232425262728293031/** * @param &#123;number[]&#125; nums1 * @param &#123;number[]&#125; nums2 * @return &#123;number[]&#125; */var intersect = function(nums1, nums2) &#123; let hash = new Map() let res = [] for(let i = 0; i &lt; nums1.length; i++) &#123; if(hash.has(nums1[i])) &#123; hash.set(nums1[i], hash.get(nums1[i]) + 1) &#125; else &#123; hash.set(nums1[i], 1) &#125; &#125; for(let i = 0; i &lt; nums2.length; i++) &#123; let temp = nums2[i] let hashKey = hash.get(temp) if(hash.has(temp)) &#123; res.push(temp) if(hashKey &gt; 1) &#123; hash.set(temp, hashKey - 1) &#125; else &#123; hash.delete(temp) &#125; &#125; &#125; return res&#125;; 解法二：双指针 两个数组排序 设定两个为0的指针，比较两个指针的元素是否相等 如果相等，元素push到返回值里，两个指针同时往前 如果不相等，元素小的指针往前 如果相等，那肯定比较过的元素就没用了，两个指针++ 如果不相等，那把元素小的数组指针++。 因为大元素可能在小元素数组里存在，但是小元素在大元素所在数组肯定不存在。因为已经排过序了。 进阶里的第一条，但这个也不确定是否算是优化。 123456789101112131415161718192021222324/** * @param &#123;number[]&#125; nums1 * @param &#123;number[]&#125; nums2 * @return &#123;number[]&#125; */var intersect = function(nums1, nums2) &#123; let p1 = 0 let p2 = 0 let res = [] nums1 = nums1.sort((a, b) =&gt; a - b) nums2 = nums2.sort((a, b) =&gt; a - b) while(p1 &lt; nums1.length &amp;&amp; p2 &lt; nums2.length) &#123; if(nums1[p1] == nums2[p2]) &#123; res.push(nums1[p1]) p1++ p2++ &#125; else if(nums1[p1] &lt; nums2[p2]) &#123; p1++ &#125; else &#123; p2++ &#125; &#125; return res&#125;; 解法三：暴力循环时间复杂度O(n^2) 遍历第一个数组，然后在第二个数组查找是否有当前元素。 如果有，把当前元素push进返回值。然后把第二个数组里该下标元素删除。 优化一下，可以遍历length短的那个数组，在length长的数组里查找。 对应进阶第二条。1234567891011121314/** * @param &#123;number[]&#125; nums1 * @param &#123;number[]&#125; nums2 * @return &#123;number[]&#125; */var intersect = function(nums1, nums2) &#123; let res = []; if (nums1.length &lt; nums2.length) [nums1, nums2] = [nums2, nums1]; for (let i = 0; i &lt; nums1.length; i++) &#123; let key = nums2.indexOf(nums1[i]); if (key !== -1) res.push(nums2.splice(key, 1)); &#125; return res;&#125;; 进阶第三条，只给了nums2的条件，没有给nums1的。 内存不够的话，只能一部分一部分的处理。但是是否已排序的条件也没给。 标签里的二分查找也没有思路，有大佬有想法的可以留言。","content":"<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定两个数组，编写一个函数来计算它们的交集。</p>\n<p>示例 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: nums1 = [1,2,2,1], nums2 = [2,2]</span><br><span class=\"line\">输出: [2,2]</span><br></pre></td></tr></table></figure></p>\n<p>示例 2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: nums1 = [4,9,5], nums2 = [9,4,9,8,4]</span><br><span class=\"line\">输出: [4,9]</span><br></pre></td></tr></table></figure></p>\n<p>说明：</p>\n<ul>\n<li>输出结果中每个元素出现的次数，应与元素在两个数组中出现的次数一致。</li>\n<li>我们可以不考虑输出结果的顺序。</li>\n</ul>\n<p>进阶:</p>\n<ul>\n<li>如果给定的数组已经排好序呢？你将如何优化你的算法？</li>\n<li>如果 nums1 的大小比 nums2 小很多，哪种方法更优？</li>\n<li>如果 nums2 的元素存储在磁盘上，磁盘内存是有限的，并且你不能一次加载所有的元素到内存中，你该怎么办？</li>\n</ul>\n<p>标签 <strong>排序</strong> <strong>哈希表</strong> <strong>双指针</strong> <strong>二分查找</strong></p>\n<p><a href=\"https://leetcode-cn.com/problems/intersection-of-two-arrays-ii/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/intersection-of-two-arrays-ii/</a></p>\n<h3 id=\"解法一：哈希表\"><a href=\"#解法一：哈希表\" class=\"headerlink\" title=\"解法一：哈希表\"></a>解法一：哈希表</h3><p>时间复杂度O(n)</p>\n<ol>\n<li><p>先用Hashmap记录第一个数组中的元素【放在key】，和出现的次数【放在value】。</p>\n</li>\n<li><p>然后再遍历第二个数组，如果找到对应元素，则添加这个元素到返回数组里。</p>\n</li>\n<li><p>如果value值大于1，HashMap中的value值减 1，表示已经找到一个相同的了。</p>\n</li>\n<li><p>如果value值等于1，则删除该元素。</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums1</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums2</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> intersect = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums1, nums2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> hash = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums1.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(hash.has(nums1[i])) &#123;</span><br><span class=\"line\">            hash.set(nums1[i], hash.get(nums1[i]) + <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">           hash.set(nums1[i], <span class=\"number\">1</span>) </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums2.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> temp = nums2[i]</span><br><span class=\"line\">        <span class=\"keyword\">let</span> hashKey = hash.get(temp)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(hash.has(temp)) &#123;</span><br><span class=\"line\">            res.push(temp)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(hashKey &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                hash.set(temp, hashKey - <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                hash.delete(temp)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解法二：双指针\"><a href=\"#解法二：双指针\" class=\"headerlink\" title=\"解法二：双指针\"></a>解法二：双指针</h3><ol>\n<li>两个数组排序</li>\n<li>设定两个为0的指针，比较两个指针的元素是否相等</li>\n<li>如果相等，元素push到返回值里，两个指针同时往前</li>\n<li>如果不相等，元素小的指针往前</li>\n</ol>\n<p>如果相等，那肯定比较过的元素就没用了，两个指针++</p>\n<p>如果不相等，那把元素小的数组指针++。</p>\n<p>因为大元素可能在小元素数组里存在，但是小元素在大元素所在数组肯定不存在。因为已经排过序了。</p>\n<p>进阶里的第一条，但这个也不确定是否算是优化。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums1</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums2</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> intersect = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums1, nums2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> p1 = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> p2 = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = []</span><br><span class=\"line\">    nums1 = nums1.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a - b)</span><br><span class=\"line\">    nums2 = nums2.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a - b)</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p1 &lt; nums1.length &amp;&amp; p2 &lt; nums2.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums1[p1] == nums2[p2]) &#123;</span><br><span class=\"line\">            res.push(nums1[p1])</span><br><span class=\"line\">            p1++</span><br><span class=\"line\">            p2++</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums1[p1] &lt; nums2[p2]) &#123;</span><br><span class=\"line\">            p1++</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            p2++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解法三：暴力循环\"><a href=\"#解法三：暴力循环\" class=\"headerlink\" title=\"解法三：暴力循环\"></a>解法三：暴力循环</h3><p>时间复杂度O(n^2)</p>\n<ol>\n<li><p>遍历第一个数组，然后在第二个数组查找是否有当前元素。</p>\n</li>\n<li><p>如果有，把当前元素push进返回值。然后把第二个数组里该下标元素删除。</p>\n</li>\n</ol>\n<p>优化一下，可以遍历length短的那个数组，在length长的数组里查找。</p>\n<p>对应进阶第二条。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums1</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums2</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> intersect = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums1, nums2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = [];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums1.length &lt; nums2.length) [nums1, nums2] = [nums2, nums1];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums1.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> key = nums2.indexOf(nums1[i]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key !== <span class=\"number\">-1</span>) res.push(nums2.splice(key, <span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>进阶第三条，只给了nums2的条件，没有给nums1的。</p>\n<p>内存不够的话，只能一部分一部分的处理。但是是否已排序的条件也没给。</p>\n<p>标签里的二分查找也没有思路，有大佬有想法的可以留言。</p>\n"},{"title":"leetcode.349.两个数组的交集","text":"题目描述给定两个数组，编写一个函数来计算它们的交集。 示例 1:12输入: nums1 = [1,2,2,1], nums2 = [2,2]输出: [2] 示例 2:12输入: nums1 = [4,9,5], nums2 = [9,4,9,8,4]输出: [9,4] 说明:12输出结果中的每个元素一定是唯一的。我们可以不考虑输出结果的顺序。 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/intersection-of-two-arrays著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 标签 排序 哈希表 双指针 二分查找 解法一 哈希表时间复杂度：O(m+n) 利用哈希集合值唯一的特性。 12345678910111213141516/** * @param &#123;number[]&#125; nums1 * @param &#123;number[]&#125; nums2 * @return &#123;number[]&#125; */var intersection = function(nums1, nums2) &#123; let hash1 = new Set(nums1) let hash2 = new Set() for(let i = 0; i &lt; nums2.length; i++) &#123; if(hash1.has(nums2[i]))&#123; hash2.add(nums2[i]) &#125; &#125; return [...hash2]&#125;; 解法二 双指针，排序因为标签里有双指针和排序就尝试了下。 执行时间会很长，排序后把数组先去重会好一点。123456789101112131415161718192021222324/** * @param &#123;number[]&#125; nums1 * @param &#123;number[]&#125; nums2 * @return &#123;number[]&#125; */var intersection = function(nums1, nums2) &#123; nums1 = nums1.sort((a,b) =&gt; a - b) nums2 = nums2.sort((a,b) =&gt; a - b) let p1 = p2 = 0 let res = new Set() while(p1 &lt; nums1.length &amp;&amp; p2 &lt; nums2.length) &#123; if(nums1[p1] &lt; nums2[p2]) &#123; p1++ &#125; else if(nums1[p1] == nums2[p2])&#123; res.add(nums1[p1]) p1++ p2++ &#125; else &#123; p2++ &#125; &#125; return [...res]&#125;; 解法三: 数组api12345678/** * @param &#123;number[]&#125; nums1 * @param &#123;number[]&#125; nums2 * @return &#123;number[]&#125; */var intersection = function(nums1, nums2) &#123; return [...new Set(nums1.filter(v =&gt; nums2.includes(v)))]&#125;;","content":"<!--\n * @File: \n * @Author: 张宏亮 - zhl@xiaoniren.cn\n * @Date: 2019-08-09 23:03:47\n * @LastEditors: 张宏亮<zhl@xiaoniren.cn>\n * @LastEditTime: 2019-08-09 23:57:06\n * @Description: file content\n * @Versions: 1.0.0\n -->\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定两个数组，编写一个函数来计算它们的交集。</p>\n<p>示例 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: nums1 = [1,2,2,1], nums2 = [2,2]</span><br><span class=\"line\">输出: [2]</span><br></pre></td></tr></table></figure></p>\n<p>示例 2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: nums1 = [4,9,5], nums2 = [9,4,9,8,4]</span><br><span class=\"line\">输出: [9,4]</span><br></pre></td></tr></table></figure></p>\n<p>说明:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出结果中的每个元素一定是唯一的。</span><br><span class=\"line\">我们可以不考虑输出结果的顺序。</span><br></pre></td></tr></table></figure></p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/intersection-of-two-arrays\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/intersection-of-two-arrays</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<p>标签 <strong>排序</strong> <strong>哈希表</strong> <strong>双指针</strong> <strong>二分查找</strong></p>\n<h3 id=\"解法一-哈希表\"><a href=\"#解法一-哈希表\" class=\"headerlink\" title=\"解法一 哈希表\"></a>解法一 哈希表</h3><p>时间复杂度：O(m+n)</p>\n<p>利用哈希集合值唯一的特性。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums1</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums2</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> intersection = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums1, nums2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> hash1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(nums1)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> hash2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums2.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(hash1.has(nums2[i]))&#123;</span><br><span class=\"line\">            hash2.add(nums2[i])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [...hash2]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解法二-双指针，排序\"><a href=\"#解法二-双指针，排序\" class=\"headerlink\" title=\"解法二 双指针，排序\"></a>解法二 双指针，排序</h3><p>因为标签里有双指针和排序就尝试了下。</p>\n<p>执行时间会很长，排序后把数组先去重会好一点。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums1</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums2</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> intersection = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums1, nums2</span>) </span>&#123;</span><br><span class=\"line\">    nums1 = nums1.sort(<span class=\"function\">(<span class=\"params\">a,b</span>) =&gt;</span> a - b)</span><br><span class=\"line\">    nums2 = nums2.sort(<span class=\"function\">(<span class=\"params\">a,b</span>) =&gt;</span> a - b)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">let</span> p1 = p2 = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>()</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p1 &lt; nums1.length &amp;&amp; p2 &lt; nums2.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums1[p1] &lt; nums2[p2]) &#123;</span><br><span class=\"line\">            p1++</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums1[p1] == nums2[p2])&#123;</span><br><span class=\"line\">            res.add(nums1[p1])</span><br><span class=\"line\">            p1++</span><br><span class=\"line\">            p2++</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            p2++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [...res]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"解法三-数组api\"><a href=\"#解法三-数组api\" class=\"headerlink\" title=\"解法三: 数组api\"></a>解法三: 数组api</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums1</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums2</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> intersection = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums1, nums2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [...new <span class=\"built_in\">Set</span>(nums1.filter(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> nums2.includes(v)))]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"leetcode.345.反转字符串中的元音字母","text":"题目描述给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。 说明：本题中，我们将空字符串定义为有效的回文串。 示例 1:12输入: &quot;A man, a plan, a canal: Panama&quot;输出: true 示例 2:12输入: &quot;race a car&quot;输出: false 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/valid-palindrome著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 标签 双指针 字符串 解题思路 用对撞指针，查看两指针是否为 ieaou 如两指针都是，交换，两指针都向中间移动 如果其中一指针不是，该指针向中间移动，直到 2 或者循环条件结束 解题方法123456789101112131415161718192021222324/** * @param &#123;string&#125; s * @return &#123;string&#125; */var reverseVowels = function(s) &#123; let reg = /[ieaou]/i let left = 0; let right = s.length - 1; // 为了交换方便，也可以用其他方法交换 let arr = s.split('') while(left &lt; right) &#123; if(reg.test(arr[left]) &amp;&amp; reg.test(arr[right])) &#123; [arr[left], arr[right]] = [arr[right], arr[left]] left++ right-- &#125; else if(!reg.test(arr[left])) &#123; left++ &#125; else if(!reg.test(arr[right])) &#123; right-- &#125; &#125; return arr.join('')&#125;;","content":"<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。</p>\n<p>说明：本题中，我们将空字符串定义为有效的回文串。</p>\n<p>示例 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: &quot;A man, a plan, a canal: Panama&quot;</span><br><span class=\"line\">输出: true</span><br></pre></td></tr></table></figure></p>\n<p>示例 2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: &quot;race a car&quot;</span><br><span class=\"line\">输出: false</span><br></pre></td></tr></table></figure></p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/valid-palindrome\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/valid-palindrome</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<p>标签 <strong>双指针</strong> <strong>字符串</strong></p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><ol>\n<li>用对撞指针，查看两指针是否为 ieaou </li>\n<li>如两指针都是，交换，两指针都向中间移动</li>\n<li>如果其中一指针不是，该指针向中间移动，直到 2 或者循环条件结束 </li>\n</ol>\n<h3 id=\"解题方法\"><a href=\"#解题方法\" class=\"headerlink\" title=\"解题方法\"></a>解题方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseVowels = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> reg = <span class=\"regexp\">/[ieaou]/i</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = s.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 为了交换方便，也可以用其他方法交换</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = s.split(<span class=\"string\">''</span>)</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left &lt; right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(reg.test(arr[left]) &amp;&amp; reg.test(arr[right])) &#123;</span><br><span class=\"line\">            [arr[left], arr[right]] = [arr[right], arr[left]]</span><br><span class=\"line\">            left++</span><br><span class=\"line\">            right--</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(!reg.test(arr[left])) &#123;</span><br><span class=\"line\">            left++</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(!reg.test(arr[right])) &#123;</span><br><span class=\"line\">           right-- </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr.join(<span class=\"string\">''</span>)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"leetcode.344.反转字符串","text":"题目描述编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 char[] 的形式给出。 不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。 你可以假设数组中的所有字符都是 ASCII 码表中的可打印字符。 示例 1：12输入：[&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;]输出：[&quot;o&quot;,&quot;l&quot;,&quot;l&quot;,&quot;e&quot;,&quot;h&quot;] 示例 2：12输入：[&quot;H&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;h&quot;]输出：[&quot;h&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;H&quot;] 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/reverse-string著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 标签 双指针 字符串 解题思路经典的对撞指针题目，设置首尾两个指针，相互交换元素，两个指针向中间移动。 然后直到两个指针相遇。 解题方法12345678910111213/** * @param &#123;character[]&#125; s * @return &#123;void&#125; Do not return anything, modify s in-place instead. */var reverseString = function(s) &#123; let right = 0 let left = s.length - 1 while(right &lt; left) &#123; [s[right], s[left]] = [s[left], s[right]] right++ left-- &#125;&#125;; 递归写法1234567891011121314/** * @param &#123;character[]&#125; s * @return &#123;void&#125; Do not return anything, modify s in-place instead. */var reverseString = function(s) &#123; let seed = ~~(s.length / 2) swap(seed, s)&#125;;var swap = function(seed, s) &#123; if(seed &gt; 0) &#123; [s[seed - 1], s[s.length-seed]] = [s[s.length-seed], s[seed - 1]] swap(--seed, s) &#125;&#125;","content":"<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 char[] 的形式给出。</p>\n<p>不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。</p>\n<p>你可以假设数组中的所有字符都是 ASCII 码表中的可打印字符。</p>\n<p>示例 1：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：[&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;]</span><br><span class=\"line\">输出：[&quot;o&quot;,&quot;l&quot;,&quot;l&quot;,&quot;e&quot;,&quot;h&quot;]</span><br></pre></td></tr></table></figure></p>\n<p>示例 2：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：[&quot;H&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;h&quot;]</span><br><span class=\"line\">输出：[&quot;h&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;H&quot;]</span><br></pre></td></tr></table></figure></p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/reverse-string\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/reverse-string</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<p>标签 <strong>双指针</strong> <strong>字符串</strong></p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>经典的对撞指针题目，设置首尾两个指针，相互交换元素，两个指针向中间移动。</p>\n<p>然后直到两个指针相遇。</p>\n<h3 id=\"解题方法\"><a href=\"#解题方法\" class=\"headerlink\" title=\"解题方法\"></a>解题方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;character[]&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span> </span>Do not return anything, modify s in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = s.length - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(right &lt; left) &#123;</span><br><span class=\"line\">        [s[right], s[left]] = [s[left], s[right]]</span><br><span class=\"line\">        right++</span><br><span class=\"line\">        left--</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>递归写法<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;character[]&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span> </span>Do not return anything, modify s in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reverseString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> seed = ~~(s.length / <span class=\"number\">2</span>)</span><br><span class=\"line\">    swap(seed, s)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> swap = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">seed, s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(seed &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        [s[seed - <span class=\"number\">1</span>], s[s.length-seed]] = [s[s.length-seed], s[seed - <span class=\"number\">1</span>]]</span><br><span class=\"line\">        swap(--seed, s)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"leetcode.283.移动零","text":"题目描述给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。 示例:12输入: [0,1,0,3,12]输出: [1,3,12,0,0] 说明: 必须在原数组上操作，不能拷贝额外的数组。 尽量减少操作次数。 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/move-zeroes著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 标签 双指针 数组 解题思路解法一：数组API 时间复杂度O(N) 对数组 API 熟悉，遍历数组，如果是 0 ，直接操作移到数组末尾。 12345678910111213141516/** * @param &#123;number[]&#125; nums * @return &#123;void&#125; Do not return anything, modify nums in-place instead. */var moveZeroes = function(nums) &#123; let temp = 0 for(let i = 0; i &lt; nums.length; i++) &#123; if(nums[temp] === 0) &#123; nums.splice(temp, 1) nums[nums.length] = 0 &#125; else &#123; temp++ &#125; &#125;&#125;; 方法二：双指针/初始定义 首先遍历一遍数列，用另个数列按顺序存储所有非 0 的元素，在将存储的非零元素按顺序复制到原数列中，空位补 0 即可。 直观的解题思路需要新建额外的数组，不符合要求，但是对于我们下面的优化算法很有起始。 只要把数组中所有的非零元素，按顺序给数组的前段元素位赋值，剩下的全部直接赋值 0。我们定义一个初始变量，为非 0 元素的数组下标，之后在遍历数列的时候不断维护这个定义。 12345678910111213141516/** * @param &#123;number[]&#125; nums * @return &#123;void&#125; Do not return anything, modify nums in-place instead. */var moveZeroes = function(nums) &#123; let lastNotZero = 0 for(let i = 0; i &lt; nums.length; i++) &#123; if(nums[i]) &#123; nums[lastNotZero++] = nums[i] &#125; &#125; for(let i = lastNotZero; i &lt; nums.length; i++) &#123; nums[i] = 0 &#125;&#125;;","content":"<!--\n * @File: \n * @Author: 张宏亮 - zhl@xiaoniren.cn\n * @Date: 2019-08-18 15:46:12\n * @LastEditors: 张宏亮<zhl@xiaoniren.cn>\n * @LastEditTime: 2019-08-18 16:40:56\n * @Description: file content\n * @Versions: 1.0.0\n -->\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。</p>\n<p>示例:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [0,1,0,3,12]</span><br><span class=\"line\">输出: [1,3,12,0,0]</span><br></pre></td></tr></table></figure></p>\n<p>说明:</p>\n<ul>\n<li>必须在原数组上操作，不能拷贝额外的数组。</li>\n<li>尽量减少操作次数。</li>\n</ul>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/move-zeroes\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/move-zeroes</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<p>标签 <strong>双指针</strong> <strong>数组</strong></p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>解法一：数组API</p>\n<p>时间复杂度O(N)</p>\n<p>对数组 API 熟悉，遍历数组，如果是 0 ，直接操作移到数组末尾。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span> </span>Do not return anything, modify nums in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> moveZeroes = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> temp = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[temp] === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            nums.splice(temp, <span class=\"number\">1</span>)</span><br><span class=\"line\">            nums[nums.length] = <span class=\"number\">0</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            temp++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>方法二：双指针/初始定义</p>\n<p>首先遍历一遍数列，用另个数列按顺序存储所有非 0 的元素，在将存储的非零元素按顺序复制到原数列中，空位补 0 即可。</p>\n<p><img src=\"https://raw.githubusercontent.com/zhl1232/javascript-algorithm/master/static/img/283.png\" alt=\"image\"></p>\n<p>直观的解题思路需要新建额外的数组，不符合要求，但是对于我们下面的优化算法很有起始。</p>\n<p>只要把数组中所有的非零元素，按顺序给数组的前段元素位赋值，剩下的全部直接赋值 0。我们定义一个初始变量，为非 0 元素的数组下标，之后在遍历数列的时候不断维护这个定义。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span> </span>Do not return anything, modify nums in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> moveZeroes = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> lastNotZero = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[i]) &#123;</span><br><span class=\"line\">            nums[lastNotZero++] = nums[i]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = lastNotZero; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        nums[i] = <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"leetcode.219.存在重复元素II","text":"题目描述给定一个整数数组和一个整数 k，判断数组中是否存在两个不同的索引 i 和 j，使得 nums [i] = nums [j]，并且 i 和 j 的差的绝对值最大为 k。 示例 1:12输入: nums = [1,2,3,1], k = 3输出: true 示例 2:12输入: nums = [1,0,1,1], k = 1输出: true 示例 3:12输入: nums = [1,2,3,1,2,3], k = 2输出: false 标签 哈希表 数组 https://leetcode-cn.com/problems/contains-duplicate-ii/ 解题思路时间复杂度O(n) 遍历数组，如果当前值不存在hash表里，把值-&gt;key,下标-&gt;value,存进hash表 如果当前值在hash表里存在，看下两个值下标的绝对值是否 &lt;= k 如果 &lt;= k，返回true 否则，更新当前值的下标。因为之前的都不成功，如果有下一个相同元素的话绝对值会更大。 循环完成还没有匹配成功，返回false 123456789101112131415161718192021/** * @param &#123;number[]&#125; nums * @param &#123;number&#125; k * @return &#123;boolean&#125; */var containsNearbyDuplicate = function(nums, k) &#123; let hash = new Map() for(let i = 0; i &lt; nums.length; i++) &#123; if(hash.has(nums[i])) &#123; if(Math.abs(hash.get(nums[i]) - i) &lt;= k) &#123; return true &#125; else &#123; hash.set(nums[i], i) &#125; &#125; else &#123; hash.set(nums[i], i) &#125; &#125; return false&#125;; 官方解题的思路 用哈希表来维护这个k大小的滑动窗口。 遍历数组，对于每个元素做以下操作： 在哈希表中搜索当前元素，如果找到了就返回 true。 在哈希表中插入当前元素。 如果当前哈希表的大小超过了 k，删除哈希表中最旧的元素。 返回 false。 时间复杂度：O(n)，n为数组长度 123456789101112131415161718/** * @param &#123;number[]&#125; nums * @param &#123;number&#125; k * @return &#123;boolean&#125; */var containsNearbyDuplicate = function(nums, k) &#123; const set = new Set(); for(let i = 0; i &lt; nums.length; i++) &#123; if(set.has(nums[i])) &#123; return true; &#125; set.add(nums[i]); if(set.size &gt; k) &#123; set.delete(nums[i - k]); &#125; &#125; return false;&#125;;","content":"<!--\n * @File: \n * @Author: 张宏亮 - zhl@xiaoniren.cn\n * @Date: 2019-07-19 00:38:41\n * @LastEditors: 张宏亮<zhl@xiaoniren.cn>\n * @LastEditTime: 2019-07-19 00:38:41\n * @Description: file content\n * @Versions: 1.0.0\n -->\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定一个整数数组和一个整数 k，判断数组中是否存在两个不同的索引 i 和 j，使得 nums [i] = nums [j]，并且 i 和 j 的差的绝对值最大为 k。</p>\n<p>示例 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: nums = [1,2,3,1], k = 3</span><br><span class=\"line\">输出: true</span><br></pre></td></tr></table></figure></p>\n<p>示例 2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: nums = [1,0,1,1], k = 1</span><br><span class=\"line\">输出: true</span><br></pre></td></tr></table></figure></p>\n<p>示例 3:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: nums = [1,2,3,1,2,3], k = 2</span><br><span class=\"line\">输出: false</span><br></pre></td></tr></table></figure></p>\n<p>标签 <strong>哈希表</strong> <strong>数组</strong></p>\n<p><a href=\"https://leetcode-cn.com/problems/contains-duplicate-ii/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/contains-duplicate-ii/</a></p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>时间复杂度O(n)</p>\n<ol>\n<li>遍历数组，如果当前值不存在hash表里，把值-&gt;key,下标-&gt;value,存进hash表</li>\n<li>如果当前值在hash表里存在，看下两个值下标的绝对值是否 &lt;= k</li>\n<li>如果 &lt;= k，返回true</li>\n<li>否则，更新当前值的下标。因为之前的都不成功，如果有下一个相同元素的话绝对值会更大。</li>\n<li>循环完成还没有匹配成功，返回false</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">k</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> containsNearbyDuplicate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, k</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> hash = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(hash.has(nums[i])) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">Math</span>.abs(hash.get(nums[i]) - i) &lt;= k) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                hash.set(nums[i], i)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            hash.set(nums[i], i)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>官方解题的思路</p>\n<ol>\n<li>用哈希表来维护这个k大小的滑动窗口。</li>\n<li>遍历数组，对于每个元素做以下操作：</li>\n</ol>\n<ul>\n<li>在哈希表中搜索当前元素，如果找到了就返回 true。</li>\n<li>在哈希表中插入当前元素。</li>\n<li>如果当前哈希表的大小超过了 k，删除哈希表中最旧的元素。</li>\n<li>返回 false。</li>\n</ul>\n<p>时间复杂度：O(n)，n为数组长度</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">k</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> containsNearbyDuplicate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, k</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">set</span> = new Set();</span><br><span class=\"line\">    for(let i = 0; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">set</span>.has(nums[i])) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">set</span>.add(nums[i]);</span><br><span class=\"line\">        if(<span class=\"keyword\">set</span>.size &gt; k) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">set</span>.delete(nums[i - k]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return false;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"leetcdoe.209.长度最小的子数组-二分方法未写","text":"题目描述给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的连续子数组。如果不存在符合条件的连续子数组，返回 0。 示例: 输入: s = 7, nums = [2,3,1,2,4,3]输出: 2解释: 子数组 [4,3] 是该条件下的长度最小的连续子数组。进阶: 如果你已经完成了O(n) 时间复杂度的解法, 请尝试 O(n log n) 时间复杂度的解法。 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/minimum-size-subarray-sum著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 标签 数组 双指针 二分查找 解法一：双指针，滑动窗口12345678910111213141516171819202122232425262728/** * @param &#123;number&#125; s * @param &#123;number[]&#125; nums * @return &#123;number&#125; */var minSubArrayLen = function(s, nums) &#123; let left = 0 let right = -1 // 滑动窗口 nums[left...right] let sum = 0 // 记录找到的最大值 let res = nums.length + 1 // 记录连续数组的长度 while (left &lt; nums.length) &#123; if (right + 1 &lt; nums.length &amp;&amp; sum &lt; s) &#123; right++ sum += nums[right] &#125; else &#123; sum -= nums[left] left++; &#125; if (sum &gt;= s) &#123; res = Math.min(res, right - left + 1) &#125; &#125; if (res === nums.length+1) &#123; return 0 // 没有找到答案返回0 &#125; return res &#125;;","content":"<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的连续子数组。如果不存在符合条件的连续子数组，返回 0。</p>\n<p>示例: </p>\n<p>输入: s = 7, nums = [2,3,1,2,4,3]<br>输出: 2<br>解释: 子数组 [4,3] 是该条件下的长度最小的连续子数组。<br>进阶:</p>\n<p>如果你已经完成了O(n) 时间复杂度的解法, 请尝试 O(n log n) 时间复杂度的解法。</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/minimum-size-subarray-sum\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/minimum-size-subarray-sum</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<p>标签 <strong>数组</strong> <strong>双指针</strong> <strong>二分查找</strong></p>\n<h3 id=\"解法一：双指针，滑动窗口\"><a href=\"#解法一：双指针，滑动窗口\" class=\"headerlink\" title=\"解法一：双指针，滑动窗口\"></a>解法一：双指针，滑动窗口</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> minSubArrayLen = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, nums</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> left = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> right = <span class=\"number\">-1</span> <span class=\"comment\">// 滑动窗口 nums[left...right]</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> sum = <span class=\"number\">0</span> <span class=\"comment\">// 记录找到的最大值</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> res = nums.length + <span class=\"number\">1</span> <span class=\"comment\">// 记录连续数组的长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (left &lt; nums.length) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (right + <span class=\"number\">1</span> &lt; nums.length &amp;&amp; sum &lt; s) &#123;</span><br><span class=\"line\">\t\t\tright++</span><br><span class=\"line\">\t\t\tsum += nums[right]</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      sum -= nums[left]</span><br><span class=\"line\">      left++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (sum &gt;= s) &#123;</span><br><span class=\"line\">\t\t\tres = <span class=\"built_in\">Math</span>.min(res, right - left + <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (res === nums.length+<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span> <span class=\"comment\">// 没有找到答案返回0</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res  </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"leetcode.205.同构字符串","text":"题目描述给定两个字符串 s 和 t，判断它们是否是同构的。 如果 s 中的字符可以被替换得到 t ，那么这两个字符串是同构的。 所有出现的字符都必须用另一个字符替换，同时保留字符的顺序。两个字符不能映射到同一个字符上，但字符可以映射自己本身。 示例 1:12输入: s = &quot;egg&quot;, t = &quot;add&quot;输出: true 示例 2:12输入: s = &quot;foo&quot;, t = &quot;bar&quot;输出: false 示例 3:12输入: s = &quot;paper&quot;, t = &quot;title&quot;输出: true 说明:你可以假设 s 和 t 具有相同的长度。 标签 哈希表 https://leetcode-cn.com/problems/isomorphic-strings/ 解法一：indexOf会返回指定字符串值在字符串中首次出现的位置 s 和 t 具有相同的长度 所以遍历一次，比较每个位置是否同构 如果遍历当前字符串是未出现过的，那两边indexOf肯定是当前i 如果遍历当前字符串是以前出现过的，那两边indexOf会拿到首次相同字串符的下标，值也应该一样 时间复杂度：两个字符串的indexOf加上一次遍历O(n^2) 123456789101112/** * @param &#123;string&#125; s * @param &#123;string&#125; t * @return &#123;boolean&#125; */var isIsomorphic = function(s, t) &#123; for(let i = 0; i &lt; s.length; i++) &#123; if(s.indexOf(s[i]) != t.indexOf(t[i])) return false &#125; return true&#125;; 解法二：哈希映射 两个字符串相互映射。 遇到重复的子字符串，判断两个哈希表里对应的映射是否正确。 12345678910111213141516171819202122/** * @param &#123;string&#125; s * @param &#123;string&#125; t * @return &#123;boolean&#125; */var isIsomorphic = function(s, t) &#123; let hash1 = new Map() let hash2 = new Map() for(let i = 0; i &lt; s.length; i++) &#123; let S = s[i] let T = t[i] if(hash1.has(S)) &#123; if(hash1.get(S) !== T) return false &#125; else if(hash2.has(T)) &#123; if(hash2.get(T) !== S) return false &#125; else &#123; hash1.set(S, T) hash2.set(T, S) &#125; &#125; return true&#125;;","content":"<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定两个字符串 s 和 t，判断它们是否是同构的。</p>\n<p>如果 s 中的字符可以被替换得到 t ，那么这两个字符串是同构的。</p>\n<p>所有出现的字符都必须用另一个字符替换，同时保留字符的顺序。两个字符不能映射到同一个字符上，但字符可以映射自己本身。</p>\n<p>示例 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: s = &quot;egg&quot;, t = &quot;add&quot;</span><br><span class=\"line\">输出: true</span><br></pre></td></tr></table></figure></p>\n<p>示例 2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: s = &quot;foo&quot;, t = &quot;bar&quot;</span><br><span class=\"line\">输出: false</span><br></pre></td></tr></table></figure></p>\n<p>示例 3:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: s = &quot;paper&quot;, t = &quot;title&quot;</span><br><span class=\"line\">输出: true</span><br></pre></td></tr></table></figure></p>\n<p>说明:<br>你可以假设 s 和 t 具有相同的长度。</p>\n<p>标签 <strong>哈希表</strong></p>\n<p><a href=\"https://leetcode-cn.com/problems/isomorphic-strings/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/isomorphic-strings/</a></p>\n<h3 id=\"解法一：\"><a href=\"#解法一：\" class=\"headerlink\" title=\"解法一：\"></a>解法一：</h3><p>indexOf会返回指定字符串值在字符串中首次出现的位置</p>\n<p>s 和 t 具有相同的长度</p>\n<p>所以遍历一次，比较每个位置是否同构</p>\n<p>如果遍历当前字符串是未出现过的，那两边indexOf肯定是当前i</p>\n<p>如果遍历当前字符串是以前出现过的，那两边indexOf会拿到首次相同字串符的下标，值也应该一样</p>\n<p>时间复杂度：两个字符串的indexOf加上一次遍历O(n^2)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">t</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isIsomorphic = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, t</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; s.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.indexOf(s[i]) != t.indexOf(t[i])) <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解法二：\"><a href=\"#解法二：\" class=\"headerlink\" title=\"解法二：\"></a>解法二：</h3><p>哈希映射</p>\n<p>两个字符串相互映射。</p>\n<p>遇到重复的子字符串，判断两个哈希表里对应的映射是否正确。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">t</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isIsomorphic = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, t</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> hash1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> hash2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; s.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> S = s[i]</span><br><span class=\"line\">        <span class=\"keyword\">let</span> T = t[i]</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(hash1.has(S)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(hash1.get(S) !== T) <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(hash2.has(T)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(hash2.get(T) !== S) <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            hash1.set(S, T)</span><br><span class=\"line\">            hash2.set(T, S)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"leetcode.202.快乐数","text":"题目描述编写一个算法来判断一个数是不是“快乐数”。 一个“快乐数”定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，也可能是无限循环但始终变不到 1。如果可以变为 1，那么这个数就是快乐数。 示例:1234567输入: 19输出: true解释: 12 + 92 = 8282 + 22 = 6862 + 82 = 10012 + 02 + 02 = 1 标签 哈希表 数学 https://leetcode-cn.com/problems/happy-number/ 一、题目给出的计算方式获取每个位置上的数字的平方和，然后重复这个过程 二、依据计算方式，得到结果范围 每个位置上的数字范围：0~9 于1位数，平方和范围：1~81 对于2位数，平方和范围：1~162 对于3位数，平方和范围：1~243 整数最大位数是10位数(最大的整数2147483647)，那么平方和范围：1~810 可以看出，平方和总会回归到3位数，并进入 1~243 这个数字范围内 三、思路1：依据“快乐集合”和“不快乐集合”来判断 既然所有整数，最终都会落到 1~243这个范围 那么这些数字，肯定有的可以得到1，有的得不到，所以这些数字就可以分成两个集合，快乐集合 和 不快乐集合 所以，如果一个整数，计算结果落在其中的一个集合，那么这个整数就是“快乐”或者“不快乐”的 四、思路2：依据是否循环来判断 既然平方和结果范围是有限的，即1~243，那么只要可以不断计算下去，就必然是循环的 程序可以检测到这种循环，进而判断整数非快乐数 五、时间复杂度分析 既然所有整数的平方和都会落在 1~243 这个范围内，那么就说明这个循环判定结果一定是有循环次数上限的，所以它是一个常数复杂度，即O(1) 12345678910111213141516171819/** * @param &#123;number&#125; n * @return &#123;boolean&#125; */var isHappy = function(n) &#123; if(n == 1 || n == 7) &#123; return true; &#125; if (n &lt; 10) &#123; return false; &#125; let sum = 0; while(n &gt;= 1) &#123; let num = n%10; n = Math.floor(n/10); sum += num*num; &#125; return isHappy(sum);&#125;;","content":"<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>编写一个算法来判断一个数是不是“快乐数”。</p>\n<p>一个“快乐数”定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，也可能是无限循环但始终变不到 1。如果可以变为 1，那么这个数就是快乐数。</p>\n<p>示例:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: 19</span><br><span class=\"line\">输出: true</span><br><span class=\"line\">解释: </span><br><span class=\"line\">12 + 92 = 82</span><br><span class=\"line\">82 + 22 = 68</span><br><span class=\"line\">62 + 82 = 100</span><br><span class=\"line\">12 + 02 + 02 = 1</span><br></pre></td></tr></table></figure></p>\n<p>标签 <strong>哈希表</strong> <strong>数学</strong></p>\n<p><a href=\"https://leetcode-cn.com/problems/happy-number/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/happy-number/</a></p>\n<h3 id=\"一、题目给出的计算方式\"><a href=\"#一、题目给出的计算方式\" class=\"headerlink\" title=\"一、题目给出的计算方式\"></a>一、题目给出的计算方式</h3><p>获取每个位置上的数字的平方和，然后重复这个过程</p>\n<h3 id=\"二、依据计算方式，得到结果范围\"><a href=\"#二、依据计算方式，得到结果范围\" class=\"headerlink\" title=\"二、依据计算方式，得到结果范围\"></a>二、依据计算方式，得到结果范围</h3><ul>\n<li>每个位置上的数字范围：0~9</li>\n<li>于1位数，平方和范围：1~81</li>\n<li>对于2位数，平方和范围：1~162</li>\n<li>对于3位数，平方和范围：1~243</li>\n<li>整数最大位数是10位数(最大的整数2147483647)，那么平方和范围：1~810</li>\n</ul>\n<p>可以看出，平方和总会回归到3位数，并进入 1~243 这个数字范围内</p>\n<h3 id=\"三、思路1：依据“快乐集合”和“不快乐集合”来判断\"><a href=\"#三、思路1：依据“快乐集合”和“不快乐集合”来判断\" class=\"headerlink\" title=\"三、思路1：依据“快乐集合”和“不快乐集合”来判断\"></a>三、思路1：依据“快乐集合”和“不快乐集合”来判断</h3><ol>\n<li>既然所有整数，最终都会落到 1~243这个范围</li>\n<li>那么这些数字，肯定有的可以得到1，有的得不到，所以这些数字就可以分成两个集合，快乐集合 和 不快乐集合</li>\n<li>所以，如果一个整数，计算结果落在其中的一个集合，那么这个整数就是“快乐”或者“不快乐”的</li>\n</ol>\n<h3 id=\"四、思路2：依据是否循环来判断\"><a href=\"#四、思路2：依据是否循环来判断\" class=\"headerlink\" title=\"四、思路2：依据是否循环来判断\"></a>四、思路2：依据是否循环来判断</h3><ol>\n<li>既然平方和结果范围是有限的，即1~243，那么只要可以不断计算下去，就必然是循环的</li>\n<li>程序可以检测到这种循环，进而判断整数非快乐数</li>\n</ol>\n<h3 id=\"五、时间复杂度分析\"><a href=\"#五、时间复杂度分析\" class=\"headerlink\" title=\"五、时间复杂度分析\"></a>五、时间复杂度分析</h3><ul>\n<li>既然所有整数的平方和都会落在 1~243 这个范围内，那么就说明这个循环判定结果一定是有循环次数上限的，所以它是一个常数复杂度，即O(1)</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">n</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isHappy = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span> || n == <span class=\"number\">7</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n &gt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> num = n%<span class=\"number\">10</span>;</span><br><span class=\"line\">        n = <span class=\"built_in\">Math</span>.floor(n/<span class=\"number\">10</span>);</span><br><span class=\"line\">        sum += num*num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> isHappy(sum);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"leetcode.167.两数之和II-输入有序数组","text":"题目描述给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。 函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。 说明:12返回的下标值（index1 和 index2）不是从零开始的。你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。 示例:123输入: numbers = [2, 7, 11, 15], target = 9输出: [1,2]解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 标签 数组 双指针 二分查找 解法一：双循环，暴力时间复杂度：O(n^2) 这个很简单，遍历每个元素x，并查找是否存在一个值与target - x 相等的目标元素。1234567891011121314151617/** * @param &#123;number[]&#125; numbers * @param &#123;number&#125; target * @return &#123;number[]&#125; */var twoSum = function(numbers, target) &#123; let res = [] for ( let i = 0; i &lt; numbers.length; i++ ) &#123; for ( let j = i+1; j &lt; numbers.length; j++ ) &#123; if ( numbers[ i ] + numbers[ j ] === target ) &#123; i++, j++ res = [i,j] return res &#125; &#125; &#125;&#125;; 解法二：hash表时间复杂度：O(n)123x + y = targety = target - xx + (target - x) = target 套入题目的例子，遍历数组，数组遍历的当前值为numbers[i]，那么 y 应该是 target - numbers[i]。所以，只要在遍历的时候确定target - numbers[i]在数组里有，返回对应下标。 hash表方法有两次哈希表方法和一次哈希表方法。 两次hash表方法，在第一次迭代中，我们将每个元素的值和它的索引添加到表中。然后，在第二次迭代中，我们将检查每个元素所对应的目标元素（target−numbers[i]）是否存在于表中。 一次hash表方法，下面代码所示。123456789101112var twoSum = function(numbers, target) &#123; let map = new Map() for(let i = 0; i &lt; numbers.length; i ++) &#123; if(map.has(target - numbers[i])) &#123; return [map.get(target - numbers[i]) + 1, i + 1] &#125; map.set(numbers[i], i) &#125;&#125;; 解法三：双向指针由于数组是有序的，只需要双指针即可。一个left指针，一个right指针， 如果 left + right 值大于 target 则 right左移动， 否则 left 右移。 如果数组无序，需要先排序。1234567891011121314var twoSum = function(numbers, target) &#123; let left = 0; let right = numbers.length while(left &lt; right) &#123; if(numbers[left] + numbers[right] === target) &#123; return [left + 1, right + 1] &#125; else if(numbers[left] + numbers[right] &lt; target) &#123; left ++ &#125; else &#123; right -- &#125; &#125;&#125;; 解法四：二分查找时间复杂度：O(n log n) x + y = target, y = target - x 遍历 numbers , 利用二分查找找 target - numbers[i] 注意题目要求，其中 index1 必须小于 index2，而且你不可以重复使用相同的元素。 123456789101112131415161718192021222324252627282930/** * @param &#123;number[]&#125; numbers * @param &#123;number&#125; target * @return &#123;number[]&#125; */ const NOT_FOUND = -1 var twoSum = function(numbers, target) &#123; for (let i = 0; i &lt; numbers.length; i++) &#123; let y = target - numbers[i] let res = binarySearch(numbers, y) if(res !== NOT_FOUND &amp;&amp; i !== res)&#123; return i &lt; res ? [i + 1, res + 1] : [res + 1, i + 1] &#125; &#125; &#125; const binarySearch = function(array, target) &#123; let low = 0 let high = array.length - 1 while (low &lt;= high) &#123; let mid = ~~((low + high) / 2) if (array[mid] &lt; target) &#123; low = mid + 1 &#125; else if (array[mid] &gt; target) &#123; high = mid - 1 &#125; else &#123; return mid &#125; &#125; return NOT_FOUND &#125;","content":"<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。</p>\n<p>函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。</p>\n<p>说明:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">返回的下标值（index1 和 index2）不是从零开始的。</span><br><span class=\"line\">你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。</span><br></pre></td></tr></table></figure></p>\n<p>示例:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: numbers = [2, 7, 11, 15], target = 9</span><br><span class=\"line\">输出: [1,2]</span><br><span class=\"line\">解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。</span><br></pre></td></tr></table></figure></p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<p>标签 <strong>数组</strong> <strong>双指针</strong> <strong>二分查找</strong></p>\n<h3 id=\"解法一：双循环，暴力\"><a href=\"#解法一：双循环，暴力\" class=\"headerlink\" title=\"解法一：双循环，暴力\"></a>解法一：双循环，暴力</h3><p>时间复杂度：O(n^2)</p>\n<p>这个很简单，遍历每个元素x，并查找是否存在一个值与target - x 相等的目标元素。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">numbers</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">target</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> twoSum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">numbers, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; numbers.length; i++ ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> j = i+<span class=\"number\">1</span>; j &lt; numbers.length; j++ ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ( numbers[ i ] + numbers[ j ] === target ) &#123;</span><br><span class=\"line\">                i++, j++</span><br><span class=\"line\">                res = [i,j]</span><br><span class=\"line\">                <span class=\"keyword\">return</span> res</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"解法二：hash表\"><a href=\"#解法二：hash表\" class=\"headerlink\" title=\"解法二：hash表\"></a>解法二：hash表</h3><p>时间复杂度：O(n)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x + y = target</span><br><span class=\"line\">y = target - x</span><br><span class=\"line\">x + (target - x) = target</span><br></pre></td></tr></table></figure></p>\n<p>套入题目的例子，遍历数组，数组遍历的当前值为numbers[i]，那么 y 应该是 target - numbers[i]。<br>所以，只要在遍历的时候确定target - numbers[i]在数组里有，返回对应下标。</p>\n<p>hash表方法有两次哈希表方法和一次哈希表方法。</p>\n<p>两次hash表方法，在第一次迭代中，我们将每个元素的值和它的索引添加到表中。然后，在第二次迭代中，我们将检查每个元素所对应的目标元素（target−numbers[i]）是否存在于表中。</p>\n<p>一次hash表方法，下面代码所示。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> twoSum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">numbers, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; numbers.length; i ++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(map.has(target - numbers[i])) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [map.get(target - numbers[i]) + <span class=\"number\">1</span>, i + <span class=\"number\">1</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        map.set(numbers[i], i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"解法三：双向指针\"><a href=\"#解法三：双向指针\" class=\"headerlink\" title=\"解法三：双向指针\"></a>解法三：双向指针</h3><p>由于数组是有序的，只需要双指针即可。一个left指针，一个right指针， 如果 left + right 值大于 target 则 right左移动， 否则 left 右移。</p>\n<p>如果数组无序，需要先排序。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> twoSum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">numbers, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = numbers.length</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left &lt; right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(numbers[left] + numbers[right] === target) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [left + <span class=\"number\">1</span>, right + <span class=\"number\">1</span>]</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(numbers[left] + numbers[right] &lt; target) &#123;</span><br><span class=\"line\">            left ++</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            right --</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"解法四：二分查找\"><a href=\"#解法四：二分查找\" class=\"headerlink\" title=\"解法四：二分查找\"></a>解法四：二分查找</h3><p>时间复杂度：O(n log n)</p>\n<ol>\n<li>x + y = target, y = target - x</li>\n<li>遍历 numbers , 利用二分查找找 target - numbers[i]</li>\n<li>注意题目要求，其中 index1 必须小于 index2，而且你不可以重复使用相同的元素。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">numbers</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">target</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number[]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> NOT_FOUND = <span class=\"number\">-1</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> twoSum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">numbers, target</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> y = target - numbers[i]</span><br><span class=\"line\">            <span class=\"keyword\">let</span> res = binarySearch(numbers, y)</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(res !== NOT_FOUND &amp;&amp; i !== res)&#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> i &lt; res ? [i + <span class=\"number\">1</span>, res + <span class=\"number\">1</span>] : [res + <span class=\"number\">1</span>, i + <span class=\"number\">1</span>]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> binarySearch = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, target</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> low = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> high = array.length - <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (low &lt;= high) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> mid = ~~((low + high) / <span class=\"number\">2</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (array[mid] &lt; target) &#123;</span><br><span class=\"line\">                low = mid + <span class=\"number\">1</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (array[mid] &gt; target) &#123;</span><br><span class=\"line\">                high = mid - <span class=\"number\">1</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> mid</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> NOT_FOUND</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>"},{"title":"leetcode.155.最小栈","text":"题目描述设计一个支持 push，pop，top 操作，并能在常数时间内检索到最小元素的栈。1234push(x) -- 将元素 x 推入栈中。pop() -- 删除栈顶的元素。top() -- 获取栈顶元素。getMin() -- 检索栈中的最小元素。 示例:12345678MinStack minStack = new MinStack();minStack.push(-2);minStack.push(0);minStack.push(-3);minStack.getMin(); --&gt; 返回 -3.minStack.pop();minStack.top(); --&gt; 返回 0.minStack.getMin(); --&gt; 返回 -2. 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/min-stack著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 标签 栈 设计 解题思路push，pop，top 操作都是正常的栈操作。关键是在常数时间内检索到最小元素的栈。 要在常数时间内检索，常规做法是以空间换时间，一般使用辅助栈解决。 设一个临时栈 数据入栈时，临时栈为空，必须放入新元素 数据入栈时，临时栈不为空，要判断新元素是否小于等于临时栈顶。符合条件放入临时栈。 数据出栈时，判断元素是否等于临时栈栈顶元素。符合条件临时栈栈顶出栈。 解题方法1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253/** * initialize your data structure here. */var MinStack = function() &#123; this.stack = [] this.tempStack = []&#125;;/** * @param &#123;number&#125; x * @return &#123;void&#125; */MinStack.prototype.push = function(x) &#123; this.stack.push(x) if(this.tempStack.length) &#123; this.tempStack[this.tempStack.length - 1] &lt; x ? '' : this.tempStack.push(x) &#125; else &#123; this.tempStack.push(x) &#125;&#125;;/** * @return &#123;void&#125; */MinStack.prototype.pop = function() &#123; let pop = this.stack.pop() if(pop == this.tempStack[this.tempStack.length - 1]) &#123; this.tempStack.pop() &#125;&#125;;/** * @return &#123;number&#125; */MinStack.prototype.top = function() &#123; return this.stack[this.stack.length - 1]&#125;;/** * @return &#123;number&#125; */MinStack.prototype.getMin = function() &#123; return this.tempStack[this.tempStack.length - 1]&#125;;/** * Your MinStack object will be instantiated and called as such: * var obj = new MinStack() * obj.push(x) * obj.pop() * var param_3 = obj.top() * var param_4 = obj.getMin() */","content":"<!--\n * @File: \n * @Author: 张宏亮 - zhl@xiaoniren.cn\n * @Date: 2019-08-18 15:46:12\n * @LastEditors: 张宏亮<hongliang@yunshan.net>\n * @LastEditTime: 2019-09-22 15:54:19\n * @Description: file content\n * @Versions: 1.0.0\n -->\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>设计一个支持 push，pop，top 操作，并能在常数时间内检索到最小元素的栈。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">push(x) -- 将元素 x 推入栈中。</span><br><span class=\"line\">pop() -- 删除栈顶的元素。</span><br><span class=\"line\">top() -- 获取栈顶元素。</span><br><span class=\"line\">getMin() -- 检索栈中的最小元素。</span><br></pre></td></tr></table></figure></p>\n<p>示例:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MinStack minStack = <span class=\"keyword\">new</span> MinStack();</span><br><span class=\"line\">minStack.push(<span class=\"number\">-2</span>);</span><br><span class=\"line\">minStack.push(<span class=\"number\">0</span>);</span><br><span class=\"line\">minStack.push(<span class=\"number\">-3</span>);</span><br><span class=\"line\">minStack.getMin();   --&gt; 返回 <span class=\"number\">-3.</span></span><br><span class=\"line\">minStack.pop();</span><br><span class=\"line\">minStack.top();      --&gt; 返回 <span class=\"number\">0.</span></span><br><span class=\"line\">minStack.getMin();   --&gt; 返回 <span class=\"number\">-2.</span></span><br></pre></td></tr></table></figure></p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/min-stack\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/min-stack</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<p>标签 <strong>栈</strong> <strong>设计</strong></p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>push，pop，top 操作都是正常的栈操作。关键是在<strong>常数时间内</strong>检索到最小元素的栈。</p>\n<p>要在常数时间内检索，常规做法是以空间换时间，一般使用辅助栈解决。</p>\n<ol>\n<li>设一个临时栈</li>\n<li>数据入栈时，临时栈为空，必须放入新元素</li>\n<li>数据入栈时，临时栈不为空，要判断新元素是否小于等于临时栈顶。符合条件放入临时栈。</li>\n<li>数据出栈时，判断元素是否等于临时栈栈顶元素。符合条件临时栈栈顶出栈。</li>\n</ol>\n<h3 id=\"解题方法\"><a href=\"#解题方法\" class=\"headerlink\" title=\"解题方法\"></a>解题方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> MinStack = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.stack = []</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.tempStack = []</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">x</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">MinStack.prototype.push = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.stack.push(x)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.tempStack.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.tempStack[<span class=\"keyword\">this</span>.tempStack.length - <span class=\"number\">1</span>] &lt; x ? <span class=\"string\">''</span> : <span class=\"keyword\">this</span>.tempStack.push(x)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.tempStack.push(x)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">MinStack.prototype.pop = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> pop = <span class=\"keyword\">this</span>.stack.pop()</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pop == <span class=\"keyword\">this</span>.tempStack[<span class=\"keyword\">this</span>.tempStack.length - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.tempStack.pop()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">MinStack.prototype.top = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.stack[<span class=\"keyword\">this</span>.stack.length - <span class=\"number\">1</span>]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">MinStack.prototype.getMin = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.tempStack[<span class=\"keyword\">this</span>.tempStack.length - <span class=\"number\">1</span>]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\"> * Your MinStack object will be instantiated and called as such:</span></span><br><span class=\"line\"><span class=\"comment\"> * var obj = new MinStack()</span></span><br><span class=\"line\"><span class=\"comment\"> * obj.push(x)</span></span><br><span class=\"line\"><span class=\"comment\"> * obj.pop()</span></span><br><span class=\"line\"><span class=\"comment\"> * var param_3 = obj.top()</span></span><br><span class=\"line\"><span class=\"comment\"> * var param_4 = obj.getMin()</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>"},{"title":"leetcode.125.验证回文串","text":"题目描述给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。 说明：本题中，我们将空字符串定义为有效的回文串。 示例 1:12输入: &quot;A man, a plan, a canal: Panama&quot;输出: true 示例 2:12输入: &quot;race a car&quot;输出: false 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/valid-palindrome著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 标签 双指针 字符串 解题思路 处理字符串，只考虑字母和数字字符，忽略字母的大小写 用对撞指针，递归查看首尾是否一致即是否回文串解题方法1234567891011121314151617181920/** * @param &#123;string&#125; s * @return &#123;boolean&#125; */var isPalindrome = function(s) &#123; // s = s.replace(/[^\\w]/g, '').toLowerCase() // 题目要求只考虑字母和数字字符，所以上面的写法也没啥问题 s = s.replace(/[^0-9a-zA-Z]/g, '').toLowerCase() let left = 0; let right = s.length - 1; while(left &lt; right) &#123; if(s[left] != s[right]) &#123; return false &#125; left++ right-- &#125; return true&#125;;","content":"<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。</p>\n<p>说明：本题中，我们将空字符串定义为有效的回文串。</p>\n<p>示例 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: &quot;A man, a plan, a canal: Panama&quot;</span><br><span class=\"line\">输出: true</span><br></pre></td></tr></table></figure></p>\n<p>示例 2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: &quot;race a car&quot;</span><br><span class=\"line\">输出: false</span><br></pre></td></tr></table></figure></p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/valid-palindrome\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/valid-palindrome</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<p>标签 <strong>双指针</strong> <strong>字符串</strong></p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><ol>\n<li>处理字符串，只考虑字母和数字字符，忽略字母的大小写</li>\n<li>用对撞指针，递归查看首尾是否一致即是否回文串<h3 id=\"解题方法\"><a href=\"#解题方法\" class=\"headerlink\" title=\"解题方法\"></a>解题方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isPalindrome = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// s = s.replace(/[^\\w]/g, '').toLowerCase()</span></span><br><span class=\"line\">    <span class=\"comment\">// 题目要求只考虑字母和数字字符，所以上面的写法也没啥问题</span></span><br><span class=\"line\">    s = s.replace(<span class=\"regexp\">/[^0-9a-zA-Z]/g</span>, <span class=\"string\">''</span>).toLowerCase()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = s.length - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left &lt; right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[left] != s[right]) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"literal\">false</span> </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        left++</span><br><span class=\"line\">        right--</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"leetcode.118.杨辉三角","text":"题目描述给定一个非负整数 numRows，生成杨辉三角的前 numRows 行。 在杨辉三角中，每个数是它左上方和右上方的数的和。 示例:123456789输入: 5输出:[ [1], [1,1], [1,2,1], [1,3,3,1], [1,4,6,4,1]] 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/pascals-triangle著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 标签 数组 解题思路是在递归的卡片里看到的这题，所以先用递归解决了 终止条件，结果的 length 大于等于 numRows 返回值，每个二维数据的子数组 拆分的子问题，每个子数组的长度为当前行数，每个子数组里的值为它左上方和右上方的数的和，上方就是行数 - 1，左边就是当前子数组的值下标-1，右边就是下标+1，判断如果左上或者右上不存在，则为0 解题方法1234567891011121314151617181920212223var generate = function(numRows) &#123; let res = [] return sub(0, numRows, res)&#125;var sub = function(row, numRows, arr) &#123; let temp = [] if (row &lt; numRows) &#123; for (let i = 0; i &lt;= row; i++) &#123; if (row === 0) &#123; temp.push(1) &#125; else &#123; let left = i-1 &gt;= 0 ? arr[row-1][i-1] : 0 let right = i &lt; arr[row-1].length ? arr[row-1][i] : 0 temp.push(left+right) &#125; &#125; arr.push(temp) sub(++row, numRows, arr) return arr &#125;&#125;","content":"<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定一个非负整数 numRows，生成杨辉三角的前 numRows 行。</p>\n<p><img src=\"https://raw.githubusercontent.com/zhl1232/javascript-algorithm/master/static/img/118.gif\" alt=\"image\"></p>\n<p>在杨辉三角中，每个数是它左上方和右上方的数的和。</p>\n<p>示例:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: 5</span><br><span class=\"line\">输出:</span><br><span class=\"line\">[</span><br><span class=\"line\">     [1],</span><br><span class=\"line\">    [1,1],</span><br><span class=\"line\">   [1,2,1],</span><br><span class=\"line\">  [1,3,3,1],</span><br><span class=\"line\"> [1,4,6,4,1]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/pascals-triangle\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/pascals-triangle</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<p>标签 <strong>数组</strong></p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>是在递归的卡片里看到的这题，所以先用递归解决了</p>\n<ol>\n<li>终止条件，结果的 length 大于等于 numRows</li>\n<li>返回值，每个二维数据的子数组</li>\n<li>拆分的子问题，每个子数组的长度为当前行数，每个子数组里的值为它左上方和右上方的数的和，上方就是行数 - 1，左边就是当前子数组的值下标-1，右边就是下标+1，判断如果左上或者右上不存在，则为0</li>\n</ol>\n<h3 id=\"解题方法\"><a href=\"#解题方法\" class=\"headerlink\" title=\"解题方法\"></a>解题方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> generate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">numRows</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = []</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> sub(<span class=\"number\">0</span>, numRows, res)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> sub = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">row, numRows, arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> temp = []</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (row &lt; numRows) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt;= row; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (row === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        temp.push(<span class=\"number\">1</span>)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> left = i<span class=\"number\">-1</span> &gt;= <span class=\"number\">0</span> ? arr[row<span class=\"number\">-1</span>][i<span class=\"number\">-1</span>] : <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> right = i &lt; arr[row<span class=\"number\">-1</span>].length ? arr[row<span class=\"number\">-1</span>][i] : <span class=\"number\">0</span></span><br><span class=\"line\">        temp.push(left+right)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    arr.push(temp)</span><br><span class=\"line\">    sub(++row, numRows, arr)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"88.未完成，占坑","text":"题目描述给定两个有序整数数组 nums1 和 nums2，将 nums2 合并到 nums1 中，使得 num1 成为一个有序数组。 说明:12初始化 nums1 和 nums2 的元素数量分别为 m 和 n。你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。 示例:12345输入:nums1 = [1,2,3,0,0,0], m = 3nums2 = [2,5,6], n = 3输出: [1,2,2,3,5,6] 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/merge-sorted-array著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 标签 双指针 数组 解题思路解法一：唔。没学算法的解法。没啥用的。 时间复杂度较差，为O((n+m)log(n+m))123456789101112131415/** * @param &#123;number[]&#125; nums1 * @param &#123;number&#125; m * @param &#123;number[]&#125; nums2 * @param &#123;number&#125; n * @return &#123;void&#125; Do not return anything, modify nums1 in-place instead. */var merge = function(nums1, m, nums2, n) &#123; nums1.splice(m,nums1.length) nums2.splice(n,nums2.length) nums1.push(...nums2) nums1.sort((a,b) =&gt; &#123; return a - b &#125;)&#125;;","content":"<!--\n * @File: \n * @Author: 张宏亮 - zhl@xiaoniren.cn\n * @Date: 2019-08-18 15:46:12\n * @LastEditors: 张宏亮<hongliang@yunshan.net>\n * @LastEditTime: 2019-09-30 15:49:46\n * @Description: file content\n * @Versions: 1.0.0\n -->\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定两个有序整数数组 nums1 和 nums2，将 nums2 合并到 nums1 中，使得 num1 成为一个有序数组。</p>\n<p>说明:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">初始化 nums1 和 nums2 的元素数量分别为 m 和 n。</span><br><span class=\"line\">你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。</span><br></pre></td></tr></table></figure></p>\n<p>示例:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入:</span><br><span class=\"line\">nums1 = [1,2,3,0,0,0], m = 3</span><br><span class=\"line\">nums2 = [2,5,6],       n = 3</span><br><span class=\"line\"></span><br><span class=\"line\">输出: [1,2,2,3,5,6]</span><br></pre></td></tr></table></figure></p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/merge-sorted-array\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/merge-sorted-array</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<p>标签 <strong>双指针</strong> <strong>数组</strong></p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><h3 id=\"解法一：\"><a href=\"#解法一：\" class=\"headerlink\" title=\"解法一：\"></a>解法一：</h3><p>唔。没学算法的解法。没啥用的。</p>\n<p>时间复杂度较差，为O((n+m)log(n+m))<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums1</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">m</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums2</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">n</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span> </span>Do not return anything, modify nums1 in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> merge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums1, m, nums2, n</span>) </span>&#123;</span><br><span class=\"line\">    nums1.splice(m,nums1.length)</span><br><span class=\"line\">    nums2.splice(n,nums2.length)</span><br><span class=\"line\">    nums1.push(...nums2)</span><br><span class=\"line\">    nums1.sort(<span class=\"function\">(<span class=\"params\">a,b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a - b</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"leetcode.80.删除排序数组中的重复项II","text":"题目描述给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素最多出现两次，返回移除后数组的新长度。 不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。 示例 1:12345给定 nums = [1,1,1,2,2,3],函数应返回新长度 length = 5, 并且原数组的前五个元素被修改为 1, 1, 2, 2, 3 。你不需要考虑数组中超出新长度后面的元素。 示例 2:12345给定 nums = [0,0,1,1,1,1,2,3,3],函数应返回新长度 length = 7, 并且原数组的前五个元素被修改为 0, 0, 1, 1, 2, 3, 3 。你不需要考虑数组中超出新长度后面的元素。 说明:123为什么返回数值是整数，但输出的答案是数组呢?请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。 你可以想象内部操作如下:12345678// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝int len = removeDuplicates(nums);// 在函数里修改输入数组对于调用者是可见的。// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。for (int i = 0; i &lt; len; i++) &#123; print(nums[i]);&#125; 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array-ii著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 标签 双指针 数组 解题思路原地算法，就是不依赖额外的资源或者依赖少数的额外资源，仅依靠输出来覆盖输入的一种算法操作。 在不复制数组的情况下从数组中删除元素的一些提示： 尝试双指针法。 你是否使用“元素顺序可以更改”这一属性？ 当要删除的元素很少时会发生什么？ 解法一：数组api定义 nums[0…i] 满足每个元素最多出现两次，遍历整个数列不断的维护这个定义。 1234567891011121314/** * @param &#123;number[]&#125; nums * @return &#123;number&#125; */var removeDuplicates = function(nums) &#123; let i = 0 while (i &lt; nums.length) &#123; if (nums[i] === nums[i - 2]) &#123; nums.splice(i, 1) &#125; else &#123; i++ &#125; &#125;&#125;; 解法二：双指针维护两个指针， 慢指针 p1 初始为 0 ，快指针 p2 初始为 1 如果快指针的后一位 (p2 + 1) 和前一位( p1 )都相同，那说明该元素出现三次。 出现三次把快指针 p2 下元素原地删除，快指针不变，继续比较 如果快指针和慢指针不相同，说明之前的数字都是最多出现两次的，把慢指针 p1 改为当前不同的数字下标，也就是快指针 p2 12345678910111213141516171819/** * @param &#123;number[]&#125; nums * @return &#123;number&#125; */var removeDuplicates = function(nums) &#123; let p1 = 0 let p2 = 1 while (p2 &lt; nums.length) &#123; if(nums[p2] == nums[p1] &amp;&amp; nums[p2 + 1] == nums[p1]) &#123; nums.splice(p2, 1) &#125; else if(nums[p2] !== nums[p1])&#123; p1 = p2 p2++ &#125; else &#123; p2++ &#125; &#125;&#125;;","content":"<!--\n * @File: \n * @Author: 张宏亮 - zhl@xiaoniren.cn\n * @Date: 2019-08-18 15:46:12\n * @LastEditors: 张宏亮<zhl@xiaoniren.cn>\n * @LastEditTime: 2019-08-24 11:45:57\n * @Description: file content\n * @Versions: 1.0.0\n -->\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素最多出现两次，返回移除后数组的新长度。</p>\n<p>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</p>\n<p>示例 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定 nums = [1,1,1,2,2,3],</span><br><span class=\"line\"></span><br><span class=\"line\">函数应返回新长度 length = 5, 并且原数组的前五个元素被修改为 1, 1, 2, 2, 3 。</span><br><span class=\"line\"></span><br><span class=\"line\">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure></p>\n<p>示例 2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定 nums = [0,0,1,1,1,1,2,3,3],</span><br><span class=\"line\"></span><br><span class=\"line\">函数应返回新长度 length = 7, 并且原数组的前五个元素被修改为 0, 0, 1, 1, 2, 3, 3 。</span><br><span class=\"line\"></span><br><span class=\"line\">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure></p>\n<p>说明:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">为什么返回数值是整数，但输出的答案是数组呢?</span><br><span class=\"line\"></span><br><span class=\"line\">请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</span><br></pre></td></tr></table></figure></p>\n<p>你可以想象内部操作如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝</span><br><span class=\"line\">int len = removeDuplicates(nums);</span><br><span class=\"line\"></span><br><span class=\"line\">// 在函数里修改输入数组对于调用者是可见的。</span><br><span class=\"line\">// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。</span><br><span class=\"line\">for (int i = 0; i &lt; len; i++) &#123;</span><br><span class=\"line\">    print(nums[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array-ii\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array-ii</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<p>标签 <strong>双指针</strong> <strong>数组</strong></p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>原地算法，就是不依赖额外的资源或者依赖少数的额外资源，仅依靠输出来覆盖输入的一种算法操作。</p>\n<p>在不复制数组的情况下从数组中删除元素的一些提示：</p>\n<ul>\n<li>尝试双指针法。</li>\n<li>你是否使用“元素顺序可以更改”这一属性？</li>\n<li>当要删除的元素很少时会发生什么？</li>\n</ul>\n<h3 id=\"解法一：数组api\"><a href=\"#解法一：数组api\" class=\"headerlink\" title=\"解法一：数组api\"></a>解法一：数组api</h3><p>定义 nums[0…i] 满足每个元素最多出现两次，遍历整个数列不断的维护这个定义。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> removeDuplicates = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i &lt; nums.length) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums[i] === nums[i - <span class=\"number\">2</span>]) &#123;</span><br><span class=\"line\">      nums.splice(i, <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      i++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解法二：双指针\"><a href=\"#解法二：双指针\" class=\"headerlink\" title=\"解法二：双指针\"></a>解法二：双指针</h3><p>维护两个指针，</p>\n<ol>\n<li>慢指针 p1 初始为 0 ，快指针 p2 初始为 1</li>\n<li>如果快指针的后一位 (p2 + 1) 和前一位( p1 )都相同，那说明该元素出现三次。</li>\n<li>出现三次把快指针 p2 下元素原地删除，快指针不变，继续比较</li>\n<li>如果快指针和慢指针不相同，说明之前的数字都是最多出现两次的，把慢指针 p1 改为当前不同的数字下标，也就是快指针 p2</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> removeDuplicates = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> p1 = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> p2 = <span class=\"number\">1</span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p2 &lt; nums.length) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums[p2] == nums[p1] &amp;&amp; nums[p2 + <span class=\"number\">1</span>] == nums[p1]) &#123;</span><br><span class=\"line\">        nums.splice(p2, <span class=\"number\">1</span>)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[p2] !== nums[p1])&#123;</span><br><span class=\"line\">        p1 = p2</span><br><span class=\"line\">        p2++</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        p2++</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"leetcode.75.颜色分类","text":"题目描述给定一个包含红色、白色和蓝色，一共 n 个元素的数组，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。 此题中，我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。 注意:1不能使用代码库中的排序函数来解决这道题。 示例:12输入: [2,0,2,1,1,0]输出: [0,0,1,1,2,2] 进阶：12一个直观的解决方案是使用计数排序的两趟扫描算法。首先，迭代计算出0、1 和 2 元素的个数，然后按照0、1、2的排序，重写当前数组。 你能想出一个仅使用常数空间的一趟扫描算法吗？ 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/sort-colors著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 标签 排序 双指针 数组 解题思路这道题的排序不是排[2,0,2,1,1,0]，这个只是抽象出来的。。 所以不止 sort 不能用，冒泡插入之类的排序也是不行的。 解法一：三指针时间复杂度O(n) 我们可以把数组分成三部分，前部（全部是0），中部（全部是1）和后部（全部是2）三个部分，每一个元素（红白蓝分别对应0、1、2）必属于其中之一。 将前部和后部各排在数组的前边和后边，中部自然就排好了。 我们用三个指针（p0, p2 和curr）来分别追踪0的最右边界，2的最左边界和当前考虑的元素。 本解法的思路是沿着数组移动 curr 指针，若nums[curr] = 0，则将其与 nums[p0]互换；若 nums[curr] = 2 ，则与 nums[p2]互换。 初始化0的最右边界：p0 = 0。在整个算法执行过程中 nums[idx &lt; p0] = 0. 初始化2的最左边界 ：p2 = n - 1。在整个算法执行过程中 nums[idx &gt; p2] = 2. 初始化当前考虑的元素序号 ：curr = 0. While curr &lt;= p2 : 若 nums[curr] = 0 ：交换第 curr个 和 第p0个 元素，并将指针都向右移。 若 nums[curr] = 2 ：交换第 curr个和第 p2个元素，并将 p2指针左移 。 若 nums[curr] = 1 ：将指针curr右移。 12345678910111213141516171819var sortColors = function(nums) &#123; if (nums.length &gt; 1) &#123; var p0 = 0, p2 = nums.length - 1, curr = 0 &#125; while (curr &lt;= p2) &#123; if (nums[curr] == 0) &#123; ;[nums[p0], nums[curr]] = [nums[curr], nums[p0]] p0++ curr++ &#125; else if (nums[curr] == 2) &#123; ;[nums[p2], nums[curr]] = [nums[curr], nums[p2]] p2-- &#125; else &#123; curr++ &#125; &#125;&#125; 解法二：计数排序时间复杂度O(n) 这样写也能过，但是这个不算是原地排序了。。 我们看一下计数排序是怎么运作 假设我们有[1,2,3,1,0,4]这六个数，这里面最大的值为4 那么我们创建一个长度为4+1的数组，每个元素默认为0。 这相当于选举排序，一共有6个投票箱，1就投1号箱，0就投入0号箱。 注意，这些箱本来就是已经排好序，并且箱的编号就是代表原数组的元素。当全部投完时，0号箱有1个，1号箱有2个，2号箱有1个，3号箱有1，4号箱有1个。 然后我们从这些箱的所有数依次出来，放到新数组，就神奇地排好序了。 计数排序没有对元素进行比较，只是利用了箱与元素的一一对应关系，根据箱已经排好序的先决条件，解决排序。 1234567891011121314151617181920212223/** * @param &#123;number[]&#125; nums * @return &#123;void&#125; Do not return anything, modify nums in-place instead. */var sortColors = function(nums) &#123; let stackLength = Math.max(...nums) // 获取数组里最大值 let countArr = Array(stackLength + 1).fill(0) // 创建长度为最大值+1的临时数组，并将元素设为0 for(let i = 0; i &lt; nums.length; i ++)&#123; // 遍历数组，在临时数组对应 key 上计数 countArr[nums[i]] += 1 &#125; nums.length = 0 // 因为题目要求原地排序 for(let i = 0; i &lt; countArr.length; i++) &#123; // 把计数数组按顺序放回原数组 while(countArr[i]) &#123; nums.push(i) countArr[i]-- &#125; &#125;&#125;;","content":"<!--\n * @File: \n * @Author: 张宏亮 - zhl@xiaoniren.cn\n * @Date: 2019-08-18 15:46:12\n * @LastEditors: 张宏亮<zhl@xiaoniren.cn>\n * @LastEditTime: 2019-08-24 13:45:34\n * @Description: file content\n * @Versions: 1.0.0\n -->\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定一个包含红色、白色和蓝色，一共 n 个元素的数组，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。</p>\n<p>此题中，我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。</p>\n<p>注意:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">不能使用代码库中的排序函数来解决这道题。</span><br></pre></td></tr></table></figure></p>\n<p>示例:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [2,0,2,1,1,0]</span><br><span class=\"line\">输出: [0,0,1,1,2,2]</span><br></pre></td></tr></table></figure></p>\n<p>进阶：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个直观的解决方案是使用计数排序的两趟扫描算法。</span><br><span class=\"line\">首先，迭代计算出0、1 和 2 元素的个数，然后按照0、1、2的排序，重写当前数组。</span><br></pre></td></tr></table></figure></p>\n<p>你能想出一个仅使用常数空间的一趟扫描算法吗？</p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/sort-colors\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/sort-colors</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<p>标签 <strong>排序</strong> <strong>双指针</strong> <strong>数组</strong></p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>这道题的排序不是排[2,0,2,1,1,0]，这个只是抽象出来的。。</p>\n<p>所以不止 sort 不能用，冒泡插入之类的排序也是不行的。</p>\n<h3 id=\"解法一：三指针\"><a href=\"#解法一：三指针\" class=\"headerlink\" title=\"解法一：三指针\"></a>解法一：三指针</h3><p>时间复杂度O(n)</p>\n<p>我们可以把数组分成三部分，前部（全部是0），中部（全部是1）和后部（全部是2）三个部分，每一个元素（红白蓝分别对应0、1、2）必属于其中之一。</p>\n<p>将前部和后部各排在数组的前边和后边，中部自然就排好了。</p>\n<p>我们用三个指针（p0, p2 和curr）来分别追踪0的最右边界，2的最左边界和当前考虑的元素。</p>\n<p>本解法的思路是沿着数组移动 curr 指针，若nums[curr] = 0，则将其与 nums[p0]互换；若 nums[curr] = 2 ，则与 nums[p2]互换。</p>\n<ul>\n<li>初始化0的最右边界：p0 = 0。在整个算法执行过程中 nums[idx &lt; p0] = 0.</li>\n<li>初始化2的最左边界 ：p2 = n - 1。在整个算法执行过程中 nums[idx &gt; p2] = 2.</li>\n<li>初始化当前考虑的元素序号 ：curr = 0.</li>\n<li><p>While curr &lt;= p2 :</p>\n<ol>\n<li><p>若 nums[curr] = 0 ：交换第 curr个 和 第p0个 元素，并将指针都向右移。</p>\n</li>\n<li><p>若 nums[curr] = 2 ：交换第 curr个和第 p2个元素，并将 p2指针左移 。</p>\n</li>\n<li><p>若 nums[curr] = 1 ：将指针curr右移。</p>\n</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sortColors = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (nums.length &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> p0 = <span class=\"number\">0</span>,</span><br><span class=\"line\">      p2 = nums.length - <span class=\"number\">1</span>,</span><br><span class=\"line\">      curr = <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (curr &lt;= p2) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums[curr] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      ;[nums[p0], nums[curr]] = [nums[curr], nums[p0]]</span><br><span class=\"line\">      p0++</span><br><span class=\"line\">      curr++</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[curr] == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">      ;[nums[p2], nums[curr]] = [nums[curr], nums[p2]]</span><br><span class=\"line\">      p2--</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      curr++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解法二：计数排序\"><a href=\"#解法二：计数排序\" class=\"headerlink\" title=\"解法二：计数排序\"></a>解法二：计数排序</h3><p>时间复杂度O(n)</p>\n<p>这样写也能过，但是这个不算是原地排序了。。</p>\n<p>我们看一下计数排序是怎么运作</p>\n<p>假设我们有[1,2,3,1,0,4]这六个数，这里面最大的值为4</p>\n<p>那么我们创建一个长度为4+1的数组，每个元素默认为0。</p>\n<p>这相当于选举排序，一共有6个投票箱，1就投1号箱，0就投入0号箱。</p>\n<p>注意，这些箱本来就是已经排好序，并且箱的编号就是代表原数组的元素。当全部投完时，0号箱有1个，1号箱有2个，2号箱有1个，3号箱有1，4号箱有1个。</p>\n<p>然后我们从这些箱的所有数依次出来，放到新数组，就神奇地排好序了。</p>\n<p>计数排序没有对元素进行比较，只是利用了箱与元素的一一对应关系，根据箱已经排好序的先决条件，解决排序。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;void&#125;</span> </span>Do not return anything, modify nums in-place instead.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sortColors = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> stackLength = <span class=\"built_in\">Math</span>.max(...nums)   <span class=\"comment\">// 获取数组里最大值 </span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> countArr = <span class=\"built_in\">Array</span>(stackLength + <span class=\"number\">1</span>).fill(<span class=\"number\">0</span>)   <span class=\"comment\">// 创建长度为最大值+1的临时数组，并将元素设为0</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i ++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历数组，在临时数组对应 key 上计数</span></span><br><span class=\"line\">        countArr[nums[i]] += <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    nums.length = <span class=\"number\">0</span>   <span class=\"comment\">// 因为题目要求原地排序</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; countArr.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 把计数数组按顺序放回原数组</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(countArr[i]) &#123;</span><br><span class=\"line\">            nums.push(i)</span><br><span class=\"line\">            countArr[i]--</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"leetcode.50.Pow(x, n)","text":"题目描述实现 pow(x, n) ，即计算 x 的 n 次幂函数。 示例 1:12输入: 2.00000, 10输出: 1024.00000 示例 2:12输入: 2.10000, 3输出: 9.26100 示例 3:123输入: 2.00000, -2输出: 0.25000解释: 2-2 = 1/22 = 1/4 = 0.25 说明:12-100.0 &lt; x &lt; 100.0n 是 32 位有符号整数，其数值范围是 [−231, 231 − 1] 。 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/powx-n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 标签 数学 二分查找 解法一：暴力法时间复杂度O(n) 模拟计算过程 如果 n &lt; 0 , n = -n, x = $\\frac{1}{x}$ 可以看示例3 不过这个会超时1234567891011121314151617/** * @param &#123;number&#125; x * @param &#123;number&#125; n * @return &#123;number&#125; */var myPow = function(x, n) &#123; if( n &lt; 0) &#123; x = 1 / x n = -n &#125; let res = 1 for(let i = 0; i &lt; n; i++) &#123; res *= x &#125; return res&#125;; 解法二：分治，二分时间复杂度O(n log n) 数学， 如果 n 为 0，那结果为 1 如果 n 为 1，那结果为 x 如果 n &lt; 0, n = -n, x = $\\frac{1}{x}$ 如果 n &gt; 0，正常计算 算法， 如果 n 是偶数位，那二分，结果就是 $x^\\frac{n}{2} \\times\\ x^\\frac{n}{2}$ 如果 n 是奇数位，那二分，结果就是 $x^\\frac{n}{2} \\times\\ x^\\frac{n}{2} \\times\\ x$ 比如 $2^4$ 就是 $2^2 \\times\\ 2^2$ ， $2^5$ 就是 $2^2 \\times\\ 2^2 \\times\\ 2$， 一直二分递归到 n 为 1 或者 0 1234567891011121314151617181920212223/** * @param &#123;number&#125; x * @param &#123;number&#125; n * @return &#123;number&#125; */var myPow = function(x, n) &#123; if(n === 0) &#123; return 1 &#125; if(n === 1) &#123; return x &#125; if(n &lt; 0) &#123; return myPow(1/x, -n) &#125; let half = ~~(n/2) let temp = myPow(x, half) if(n % 2 === 0) &#123; return temp * temp &#125; else &#123; return temp * temp * x &#125;&#125;;","content":"<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>实现 pow(x, n) ，即计算 x 的 n 次幂函数。</p>\n<p>示例 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: 2.00000, 10</span><br><span class=\"line\">输出: 1024.00000</span><br></pre></td></tr></table></figure></p>\n<p>示例 2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: 2.10000, 3</span><br><span class=\"line\">输出: 9.26100</span><br></pre></td></tr></table></figure></p>\n<p>示例 3:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: 2.00000, -2</span><br><span class=\"line\">输出: 0.25000</span><br><span class=\"line\">解释: 2-2 = 1/22 = 1/4 = 0.25</span><br></pre></td></tr></table></figure></p>\n<p>说明:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-100.0 &lt; x &lt; 100.0</span><br><span class=\"line\">n 是 32 位有符号整数，其数值范围是 [−231, 231 − 1] 。</span><br></pre></td></tr></table></figure></p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/powx-n\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/powx-n</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<p>标签 <strong>数学</strong> <strong>二分查找</strong></p>\n<h3 id=\"解法一：暴力法\"><a href=\"#解法一：暴力法\" class=\"headerlink\" title=\"解法一：暴力法\"></a>解法一：暴力法</h3><p>时间复杂度O(n)</p>\n<p>模拟计算过程</p>\n<p>如果 n &lt; 0 , n = -n, x = $\\frac{1}{x}$</p>\n<p>可以看示例3</p>\n<p>不过这个会超时<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">x</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">n</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myPow = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>( n &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        x = <span class=\"number\">1</span> / x</span><br><span class=\"line\">        n = -n</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        res *= x</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"解法二：分治，二分\"><a href=\"#解法二：分治，二分\" class=\"headerlink\" title=\"解法二：分治，二分\"></a>解法二：分治，二分</h3><p>时间复杂度O(n log n)</p>\n<p>数学，</p>\n<ol>\n<li>如果 n 为 0，那结果为 1</li>\n<li>如果 n 为 1，那结果为 x</li>\n<li>如果 n &lt; 0, n = -n, x = $\\frac{1}{x}$</li>\n<li>如果 n &gt; 0，正常计算</li>\n</ol>\n<p>算法，</p>\n<ol>\n<li>如果 n 是偶数位，那二分，结果就是 $x^\\frac{n}{2} \\times\\ x^\\frac{n}{2}$</li>\n<li>如果 n 是奇数位，那二分，结果就是 $x^\\frac{n}{2} \\times\\ x^\\frac{n}{2} \\times\\ x$</li>\n<li>比如 $2^4$ 就是 $2^2 \\times\\ 2^2$ ， $2^5$ 就是 $2^2 \\times\\ 2^2 \\times\\ 2$，</li>\n<li>一直二分递归到 n 为 1 或者 0</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">x</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">n</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myPow = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> myPow(<span class=\"number\">1</span>/x, -n)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> half = ~~(n/<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> temp = myPow(x, half)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n % <span class=\"number\">2</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> temp * temp</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> temp * temp * x</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"leetcode.49.字母异位词分组","text":"题目描述给定一个字符串数组，将字母异位词组合在一起。字母异位词指字母相同，但排列不同的字符串。 示例:1234567输入: [&quot;eat&quot;, &quot;tea&quot;, &quot;tan&quot;, &quot;ate&quot;, &quot;nat&quot;, &quot;bat&quot;],输出:[ [&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;], [&quot;nat&quot;,&quot;tan&quot;], [&quot;bat&quot;]] 说明： 所有输入均为小写字母。 不考虑答案输出的顺序。 标签 哈希表 字符串 https://leetcode-cn.com/problems/group-anagrams/ 解法一：哈希表当且仅当它们的排序字符串相等时，两个字符串是字母异位词。 维护一个哈希映射 ans : {String -&gt; List}，其中每个键 K 是一个排序字符串，每个值是初始输入的字符串列表，排序后等于 K。 时间复杂度：O(NKlogK)，其中 N 是 strs 的长度，而 K 是 strs 中字符串的最大长度。当我们遍历每个字符串时，外部循环具有的复杂度为 O(N)。然后，我们在 O(KlogK) 的时间内对每个字符串排序。 1234567891011121314151617181920/** * @param &#123;string[]&#125; strs * @return &#123;string[][]&#125; */var groupAnagrams = function(strs) &#123; let hash = new Map() for(let i = 0; i &lt; strs.length; i++) &#123; let str = strs[i].split('').sort().join() if(hash.has(str)) &#123; let temp = hash.get(str) temp.push(strs[i]) hash.set(str, temp) &#125; else &#123; hash.set(str, [strs[i]]) &#125; &#125; return [...hash.values()]&#125;; 解法二：利用数学设计键 算术基本定理，又称为正整数的唯一分解定理，即：每个大于1的自然数，要么本身就是质数，要么可以写为2个以上的质数的积，而且这些质因子按大小排列之后，写法仅有一种方式。 利用这个，我们把每个字符串都映射到一个正数上。 用一个数组存储质数 prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103]。 然后每个字符串的字符减去 ‘ a ‘ ，然后取到 prime 中对应的质数。把它们累乘。 例如 abc ，就对应 ‘a’ - ‘a’， ‘b’ - ‘a’， ‘c’ - ‘a’，即 0, 1, 2，也就是对应素数 2 3 5，然后相乘 2 3 5 = 30，就把 “abc” 映射到了 30。 相减时用 Unicode 编码。 和解法一的理论差不多，不过少了字符串的排序。 也就是用另外一种方式解决了哈希设计键。 时间复杂度 O(NK) 12345678910111213var groupAnagrams = function(strs) &#123; let res = &#123;&#125;; for(let i = 0; i &lt; strs.length; i++) &#123; const str = strs[i] const hash = str.split('').reduce((sum, s)=&gt;&#123; return sum * [3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103 ][s.charCodeAt(0) - 97] &#125;, 1) res[hash] ? res[hash].push(str) : res[hash] = [str] &#125; return Object.values(res)&#125;; 解法三：计数 首先初始化 key = “0#0#0#0#0#”，数字分别代表 abcde 出现的次数，# 用来分割。 这样的话，”abb” 就映射到了 “1#2#0#0#0”。 “cdc” 就映射到了 “0#0#2#1#0”。 “dcc” 就映射到了 “0#0#2#1#0”。 然后和其他解法一样，如果 key 一样，就把值映射到对应的 key 里。 时间复杂度：O(NK)。 123456789101112131415161718192021222324/** * @param &#123;string[]&#125; strs * @return &#123;string[][]&#125; */var groupAnagrams = function(strs) &#123; let hash = new Map() for(let i = 0; i &lt; strs.length; i++) &#123; let str = strs[i] let arr = Array(26).fill(0) for(let j = 0; j &lt; str.length; j++) &#123; arr[str.charCodeAt(j) - 97] ++ &#125; let hashKey = arr.join() if(hash.has(hashKey)) &#123; let temp = hash.get(hashKey) temp.push(str) hash.set(hashKey, temp) &#125; else &#123; hash.set(hashKey, [str]) &#125; &#125; return [...hash.values()]&#125;; 所有的方法基本上都是为哈希表设计合适的键 因为需要几个值同时对应同一个键 所以要找到一个合适键的规则","content":"<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定一个字符串数组，将字母异位词组合在一起。字母异位词指字母相同，但排列不同的字符串。</p>\n<p>示例:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [&quot;eat&quot;, &quot;tea&quot;, &quot;tan&quot;, &quot;ate&quot;, &quot;nat&quot;, &quot;bat&quot;],</span><br><span class=\"line\">输出:</span><br><span class=\"line\">[</span><br><span class=\"line\">  [&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;],</span><br><span class=\"line\">  [&quot;nat&quot;,&quot;tan&quot;],</span><br><span class=\"line\">  [&quot;bat&quot;]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>说明：</p>\n<p>所有输入均为小写字母。</p>\n<p>不考虑答案输出的顺序。</p>\n<p>标签 <strong>哈希表</strong> <strong>字符串</strong></p>\n<p><a href=\"https://leetcode-cn.com/problems/group-anagrams/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/group-anagrams/</a></p>\n<h3 id=\"解法一：哈希表\"><a href=\"#解法一：哈希表\" class=\"headerlink\" title=\"解法一：哈希表\"></a>解法一：哈希表</h3><p>当且仅当它们的排序字符串相等时，两个字符串是字母异位词。</p>\n<p>维护一个哈希映射 ans : {String -&gt; List}，其中每个键 K 是一个排序字符串，每个值是初始输入的字符串列表，排序后等于 K。</p>\n<p><img src=\"https://raw.githubusercontent.com/zhl1232/javascript-algorithm/master/static/img/49.png\" alt=\"image\"></p>\n<p>时间复杂度：O(NKlogK)，其中 N 是 strs 的长度，而 K 是 strs 中字符串的最大长度。当我们遍历每个字符串时，外部循环具有的复杂度为 O(N)。然后，我们在 O(KlogK) 的时间内对每个字符串排序。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string[]&#125;</span> <span class=\"variable\">strs</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string[][]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> groupAnagrams = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">strs</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> hash = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; strs.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> str = strs[i].split(<span class=\"string\">''</span>).sort().join()</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(hash.has(str)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> temp = hash.get(str)</span><br><span class=\"line\">            temp.push(strs[i])</span><br><span class=\"line\">            hash.set(str, temp)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            hash.set(str, [strs[i]])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> [...hash.values()]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解法二：利用数学设计键\"><a href=\"#解法二：利用数学设计键\" class=\"headerlink\" title=\"解法二：利用数学设计键\"></a>解法二：利用数学设计键</h3><blockquote>\n<p>算术基本定理，又称为正整数的唯一分解定理，即：每个大于1的自然数，要么本身就是质数，要么可以写为2个以上的质数的积，而且这些质因子按大小排列之后，写法仅有一种方式。</p>\n</blockquote>\n<p>利用这个，我们把每个字符串都映射到一个正数上。</p>\n<ul>\n<li><p>用一个数组存储质数 prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103]。</p>\n</li>\n<li><p>然后每个字符串的字符减去 ‘ a ‘ ，然后取到 prime 中对应的质数。把它们累乘。</p>\n</li>\n<li><p>例如 abc ，就对应 ‘a’ - ‘a’， ‘b’ - ‘a’， ‘c’ - ‘a’，即 0, 1, 2，也就是对应素数 2 3 5，然后相乘 2 <em> 3 </em> 5 = 30，就把 “abc” 映射到了 30。</p>\n</li>\n<li><p>相减时用 Unicode 编码。</p>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/zhl1232/javascript-algorithm/master/static/img/49-1.png\" alt=\"image\"></p>\n<p>和解法一的理论差不多，不过少了字符串的排序。</p>\n<p>也就是用另外一种方式解决了哈希设计键。</p>\n<p>时间复杂度 O(NK)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> groupAnagrams = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">strs</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> res = &#123;&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; strs.length; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> str = strs[i]</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> hash = str.split(<span class=\"string\">''</span>).reduce(<span class=\"function\">(<span class=\"params\">sum, s</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> sum * [<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">11</span>,<span class=\"number\">13</span>,<span class=\"number\">17</span>,<span class=\"number\">19</span>,<span class=\"number\">23</span>,<span class=\"number\">29</span>,<span class=\"number\">31</span>,<span class=\"number\">37</span>,<span class=\"number\">41</span>,<span class=\"number\">43</span>,<span class=\"number\">47</span>,<span class=\"number\">53</span>,<span class=\"number\">59</span>,<span class=\"number\">61</span>,<span class=\"number\">67</span>,<span class=\"number\">71</span>,<span class=\"number\">73</span>,<span class=\"number\">79</span>,<span class=\"number\">83</span>,<span class=\"number\">89</span>,<span class=\"number\">97</span>,<span class=\"number\">101</span>,<span class=\"number\">103</span> ][s.charCodeAt(<span class=\"number\">0</span>) - <span class=\"number\">97</span>]</span><br><span class=\"line\">\t\t&#125;, <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\tres[hash] ? res[hash].push(str) : res[hash] = [str]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.values(res)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解法三：计数\"><a href=\"#解法三：计数\" class=\"headerlink\" title=\"解法三：计数\"></a>解法三：计数</h3><ul>\n<li><p>首先初始化 key = “0#0#0#0#0#”，数字分别代表 abcde 出现的次数，# 用来分割。</p>\n</li>\n<li><p>这样的话，”abb” 就映射到了 “1#2#0#0#0”。</p>\n</li>\n<li><p>“cdc” 就映射到了 “0#0#2#1#0”。</p>\n</li>\n<li><p>“dcc” 就映射到了 “0#0#2#1#0”。</p>\n</li>\n</ul>\n<p>然后和其他解法一样，如果 key 一样，就把值映射到对应的 key 里。</p>\n<p>时间复杂度：O(NK)。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string[]&#125;</span> <span class=\"variable\">strs</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;string[][]&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> groupAnagrams = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">strs</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> hash = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; strs.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> str = strs[i]</span><br><span class=\"line\">        <span class=\"keyword\">let</span> arr = <span class=\"built_in\">Array</span>(<span class=\"number\">26</span>).fill(<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; str.length; j++) &#123;</span><br><span class=\"line\">            arr[str.charCodeAt(j) - <span class=\"number\">97</span>] ++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> hashKey = arr.join()</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(hash.has(hashKey)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> temp = hash.get(hashKey)</span><br><span class=\"line\">            temp.push(str)</span><br><span class=\"line\">            hash.set(hashKey, temp)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            hash.set(hashKey, [str])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [...hash.values()]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>所有的方法基本上都是为哈希表设计合适的键</p>\n<p>因为需要几个值同时对应同一个键</p>\n<p>所以要找到一个合适键的规则</p>\n"},{"title":"leetcode.36.有效的数独","text":"题目描述判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。 数字 1-9 在每一行只能出现一次。数字 1-9 在每一列只能出现一次。数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。 上图是一个部分填充的有效的数独。 数独部分空格内已填入了数字，空白格用 ‘.’ 表示。 示例 1:12345678910111213输入:[ [&quot;5&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;], [&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;], [&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;], [&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;], [&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;], [&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;], [&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;], [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;], [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]]输出: true 示例 2:12345678910111213输入:[ [&quot;8&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;], [&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;], [&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;], [&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;], [&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;], [&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;], [&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;], [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;], [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]]输出: false 解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。 说明:一个有效的数独（部分已被填充）不一定是可解的。只需要根据以上规则，验证已经填入的数字是否有效即可。给定数独序列只包含数字 1-9 和字符 ‘.’ 。给定数独永远是 9x9 形式的。 标签 哈希表 https://leetcode-cn.com/problems/valid-sudoku/ 方法一：一次迭代思路： 每一行、每一列、每一个小正方形都不能重复出现相同数字 用hash记录它的行，列和小正方形的值，有重复就false 可以用 (~~(i/3))*3 + ~~(j/3) 来确定小正方块的位置 时间复杂度：O(1)，因为我们只对 81 个单元格进行了一次迭代。 123456789101112131415161718192021222324252627282930313233343536/** * @param &#123;character[][]&#125; board * @return &#123;boolean&#125; */var isValidSudoku = function(board) &#123; let rows = new Map() let cols = new Map() let boxs = new Map() for(let i = 0; i &lt; board.length; i++) &#123; rows.set(`rows$&#123;i&#125;`, new Map()) cols.set(`cols$&#123;i&#125;`, new Map()) boxs.set(`boxs$&#123;i&#125;`, new Map()) &#125; for(let i = 0; i &lt; board.length; i++) &#123; for(let j = 0; j &lt; board[i].length; j++) &#123; if(board[i][j] == '.') continue let boxIndex = (~~(i/3))*3 + ~~(j/3) let row = rows.get(`rows$&#123;i&#125;`) let col = cols.get(`cols$&#123;j&#125;`) let box = boxs.get(`boxs$&#123;boxIndex&#125;`) if(row.has(board[i][j]) || col.has(board[i][j]) || box.has(board[i][j])) &#123; return false &#125; else &#123; row.set(board[i][j], 1) col.set(board[i][j], 1) box.set(board[i][j], 1) &#125; &#125; &#125; return true&#125;; 方法二：三次迭代一个简单的解决方案是遍历该 9 x 9 数独 三 次，以确保： 行中没有重复的数字。 列中没有重复的数字。 3 x 3 子数独内没有重复的数字。 这个没啥说的。 1234567891011121314151617181920212223242526272829303132333435363738/** * @param &#123;character[][]&#125; board * @return &#123;boolean&#125; */var isValidSudoku = function(board) &#123; for (let i = 0; i &lt; 9; i++) &#123; // 检查行重复项 let row = &#123;&#125;; for (let j = 0; j &lt; 9; j++) &#123; if (board[i][j] !== '.') &#123; if (row[board[i][j]]) return false; row[board[i][j]] = 1; &#125; &#125; &#125; for (let i = 0; i &lt; 9; i++) &#123; // 检查列重复项 let col = &#123;&#125;; for (let j = 0; j &lt; 9; j++) &#123; if (board[j][i] !== '.') &#123; if (col[board[j][i]]) return false; col[board[j][i]] = 1; &#125; &#125; &#125; for (let i = 0; i &lt; 9; i += 3) &#123; // 检查3*3宫格重复项 for (let j = 0; j &lt; 9; j += 3) &#123; let miniTable = &#123;&#125;; for (let m = i; m &lt; i + 3; m++) &#123; for (let n = j; n &lt; j + 3; n++) &#123; if (board[m][n] !== '.') &#123; if (miniTable[board[m][n]]) return false; miniTable[board[m][n]] = 1; &#125; &#125; &#125; &#125; &#125; return true;&#125;;","content":"<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。</p>\n<p>数字 1-9 在每一行只能出现一次。<br>数字 1-9 在每一列只能出现一次。<br>数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。</p>\n<p><img src=\"https://raw.githubusercontent.com/zhl1232/javascript-algorithm/master/static/img/36.png\" alt=\"image\"></p>\n<p>上图是一个部分填充的有效的数独。</p>\n<p>数独部分空格内已填入了数字，空白格用 ‘.’ 表示。</p>\n<p>示例 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入:</span><br><span class=\"line\">[</span><br><span class=\"line\">  [&quot;5&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],</span><br><span class=\"line\">  [&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],</span><br><span class=\"line\">  [&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],</span><br><span class=\"line\">  [&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],</span><br><span class=\"line\">  [&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],</span><br><span class=\"line\">  [&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],</span><br><span class=\"line\">  [&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],</span><br><span class=\"line\">  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],</span><br><span class=\"line\">  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]</span><br><span class=\"line\">]</span><br><span class=\"line\">输出: true</span><br></pre></td></tr></table></figure></p>\n<p>示例 2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入:</span><br><span class=\"line\">[</span><br><span class=\"line\">  [&quot;8&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],</span><br><span class=\"line\">  [&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],</span><br><span class=\"line\">  [&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],</span><br><span class=\"line\">  [&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],</span><br><span class=\"line\">  [&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],</span><br><span class=\"line\">  [&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],</span><br><span class=\"line\">  [&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],</span><br><span class=\"line\">  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],</span><br><span class=\"line\">  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]</span><br><span class=\"line\">]</span><br><span class=\"line\">输出: false</span><br></pre></td></tr></table></figure></p>\n<p>解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。<br>     但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。</p>\n<p>说明:<br>一个有效的数独（部分已被填充）不一定是可解的。<br>只需要根据以上规则，验证已经填入的数字是否有效即可。<br>给定数独序列只包含数字 1-9 和字符 ‘.’ 。<br>给定数独永远是 9x9 形式的。</p>\n<p>标签 <strong>哈希表</strong></p>\n<p><a href=\"https://leetcode-cn.com/problems/valid-sudoku/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/valid-sudoku/</a></p>\n<h3 id=\"方法一：一次迭代\"><a href=\"#方法一：一次迭代\" class=\"headerlink\" title=\"方法一：一次迭代\"></a>方法一：一次迭代</h3><p>思路：</p>\n<ul>\n<li>每一行、每一列、每一个小正方形都不能重复出现相同数字</li>\n<li>用hash记录它的行，列和小正方形的值，有重复就false</li>\n<li>可以用 (~~(i/3))*3 + ~~(j/3) 来确定小正方块的位置</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/zhl1232/javascript-algorithm/master/static/img/36-1.png\" alt=\"image\"></p>\n<p>时间复杂度：O(1)，因为我们只对 81 个单元格进行了一次迭代。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;character[][]&#125;</span> <span class=\"variable\">board</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isValidSudoku = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">board</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> rows = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> cols = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> boxs = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>() </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; board.length; i++) &#123;</span><br><span class=\"line\">        rows.set(<span class=\"string\">`rows<span class=\"subst\">$&#123;i&#125;</span>`</span>, <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>())</span><br><span class=\"line\">        cols.set(<span class=\"string\">`cols<span class=\"subst\">$&#123;i&#125;</span>`</span>, <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>())</span><br><span class=\"line\">        boxs.set(<span class=\"string\">`boxs<span class=\"subst\">$&#123;i&#125;</span>`</span>, <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; board.length; i++) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; board[i].length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(board[i][j] == <span class=\"string\">'.'</span>) <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> boxIndex = (~~(i/<span class=\"number\">3</span>))*<span class=\"number\">3</span> + ~~(j/<span class=\"number\">3</span>)</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">let</span> row = rows.get(<span class=\"string\">`rows<span class=\"subst\">$&#123;i&#125;</span>`</span>)</span><br><span class=\"line\">            <span class=\"keyword\">let</span> col = cols.get(<span class=\"string\">`cols<span class=\"subst\">$&#123;j&#125;</span>`</span>)</span><br><span class=\"line\">            <span class=\"keyword\">let</span> box = boxs.get(<span class=\"string\">`boxs<span class=\"subst\">$&#123;boxIndex&#125;</span>`</span>)</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(row.has(board[i][j]) || col.has(board[i][j]) || box.has(board[i][j])) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                row.set(board[i][j], <span class=\"number\">1</span>)</span><br><span class=\"line\">                col.set(board[i][j], <span class=\"number\">1</span>)</span><br><span class=\"line\">                box.set(board[i][j], <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法二：三次迭代\"><a href=\"#方法二：三次迭代\" class=\"headerlink\" title=\"方法二：三次迭代\"></a>方法二：三次迭代</h3><p>一个简单的解决方案是遍历该 9 x 9 数独 三 次，以确保：</p>\n<ul>\n<li>行中没有重复的数字。</li>\n<li>列中没有重复的数字。</li>\n<li>3 x 3 子数独内没有重复的数字。</li>\n</ul>\n<p>这个没啥说的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;character[][]&#125;</span> <span class=\"variable\">board</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isValidSudoku = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">board</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++) &#123; <span class=\"comment\">// 检查行重复项</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> row = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">9</span>; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (board[i][j] !== <span class=\"string\">'.'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (row[board[i][j]]) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        row[board[i][j]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++) &#123; <span class=\"comment\">// 检查列重复项</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> col = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">9</span>; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (board[j][i] !== <span class=\"string\">'.'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (col[board[j][i]]) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        col[board[j][i]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i += <span class=\"number\">3</span>) &#123; <span class=\"comment\">// 检查3*3宫格重复项</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">9</span>; j += <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> miniTable = &#123;&#125;;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> m = i; m &lt; i + <span class=\"number\">3</span>; m++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> n = j; n &lt; j + <span class=\"number\">3</span>; n++) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (board[m][n] !== <span class=\"string\">'.'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (miniTable[board[m][n]]) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            miniTable[board[m][n]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"leetcode.27.移除元素","text":"题目描述给定一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，返回移除后数组的新长度。 不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。 元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。 示例 1:12345给定 nums = [3,2,2,3], val = 3,函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。 示例 2:1234567给定 nums = [0,1,2,2,3,0,4,2], val = 2,函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。 说明:123为什么返回数值是整数，但输出的答案是数组呢?请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。 你可以想象内部操作如下:12345678// nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝int len = removeElement(nums, val);// 在函数里修改输入数组对于调用者是可见的。// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。for (int i = 0; i &lt; len; i++) &#123; print(nums[i]);&#125; 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/remove-element著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 标签 双指针 数组 解题思路原地算法，就是不依赖额外的资源或者依赖少数的额外资源，仅依靠输出来覆盖输入的一种算法操作。 在不复制数组的情况下从数组中删除元素的一些提示： 尝试双指针法。 你是否使用“元素顺序可以更改”这一属性？ 当要删除的元素很少时会发生什么？解法一：双指针 注意是原地算法，数组长度是会变动的，所以定义一个变量存储数组长度。12345678910111213141516171819/** * @param &#123;number[]&#125; nums * @param &#123;number&#125; val * @return &#123;number&#125; */var removeElement = function(nums, val) &#123; let temp = 0 let len = nums.length for(let i = 0; i &lt; len; i++) &#123; if(nums[temp]=== val) &#123; nums.splice(temp, 1) &#125; else &#123; temp++ &#125; &#125; return nums.length&#125;; 上面的代码等于 val 的值有几个就要多做几次无意义的循环。 优化下代码。 当我们遇到 nums[i] = val 时，我们可以将当前元素与最后一个元素进行交换，并释放最后一个元素。这实际上使数组的大小减少了 1。 请注意，被交换的最后一个元素可能是您想要移除的值。但是不要担心，在下一次迭代中，我们仍然会检查这个元素。 12345678910111213141516171819/** * @param &#123;number[]&#125; nums * @param &#123;number&#125; val * @return &#123;number&#125; */var removeElement = function(nums, val) &#123; let i = 0 let len = nums.length while(i &lt; len) &#123; if(nums[i] == val) &#123; nums[i] = nums[len - 1] len-- &#125; else &#123; i++ &#125; &#125; return len&#125;;","content":"<!--\n * @File: \n * @Author: 张宏亮 - zhl@xiaoniren.cn\n * @Date: 2019-08-18 15:46:12\n * @LastEditors: 张宏亮<zhl@xiaoniren.cn>\n * @LastEditTime: 2019-08-18 17:20:33\n * @Description: file content\n * @Versions: 1.0.0\n -->\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，返回移除后数组的新长度。</p>\n<p>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</p>\n<p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p>\n<p>示例 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定 nums = [3,2,2,3], val = 3,</span><br><span class=\"line\"></span><br><span class=\"line\">函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。</span><br><span class=\"line\"></span><br><span class=\"line\">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure></p>\n<p>示例 2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定 nums = [0,1,2,2,3,0,4,2], val = 2,</span><br><span class=\"line\"></span><br><span class=\"line\">函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。</span><br><span class=\"line\"></span><br><span class=\"line\">注意这五个元素可为任意顺序。</span><br><span class=\"line\"></span><br><span class=\"line\">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure></p>\n<p>说明:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">为什么返回数值是整数，但输出的答案是数组呢?</span><br><span class=\"line\"></span><br><span class=\"line\">请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</span><br></pre></td></tr></table></figure></p>\n<p>你可以想象内部操作如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝</span><br><span class=\"line\">int len = removeElement(nums, val);</span><br><span class=\"line\"></span><br><span class=\"line\">// 在函数里修改输入数组对于调用者是可见的。</span><br><span class=\"line\">// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。</span><br><span class=\"line\">for (int i = 0; i &lt; len; i++) &#123;</span><br><span class=\"line\">    print(nums[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/remove-element\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/remove-element</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<p>标签 <strong>双指针</strong> <strong>数组</strong></p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>原地算法，就是不依赖额外的资源或者依赖少数的额外资源，仅依靠输出来覆盖输入的一种算法操作。</p>\n<p>在不复制数组的情况下从数组中删除元素的一些提示：</p>\n<ul>\n<li>尝试双指针法。</li>\n<li>你是否使用“元素顺序可以更改”这一属性？</li>\n<li>当要删除的元素很少时会发生什么？<h3 id=\"解法一：双指针\"><a href=\"#解法一：双指针\" class=\"headerlink\" title=\"解法一：双指针\"></a>解法一：双指针</h3></li>\n</ul>\n<p>注意是原地算法，数组长度是会变动的，所以定义一个变量存储数组长度。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">val</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> removeElement = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> temp = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = nums.length</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[temp]=== val) &#123;</span><br><span class=\"line\">            nums.splice(temp, <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            temp++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums.length</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>上面的代码等于 val 的值有几个就要多做几次无意义的循环。</p>\n<p>优化下代码。</p>\n<p>当我们遇到 nums[i] = val 时，我们可以将当前元素与最后一个元素进行交换，并释放最后一个元素。这实际上使数组的大小减少了 1。</p>\n<p>请注意，被交换的最后一个元素可能是您想要移除的值。但是不要担心，在下一次迭代中，我们仍然会检查这个元素。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number&#125;</span> <span class=\"variable\">val</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> removeElement = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> len = nums.length</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; len) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[i] == val) &#123;     </span><br><span class=\"line\">            nums[i] = nums[len - <span class=\"number\">1</span>]   </span><br><span class=\"line\">            len--</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            i++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> len</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"leetcode.26.删除排序数组中的重复项","text":"题目描述给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。 不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。 示例 1:12345给定数组 nums = [1,1,2], 函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 你不需要考虑数组中超出新长度后面的元素。 示例 2:12345给定 nums = [0,0,1,1,1,2,2,3,3,4],函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。你不需要考虑数组中超出新长度后面的元素。 说明:123为什么返回数值是整数，但输出的答案是数组呢?请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。 你可以想象内部操作如下:12345678// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝int len = removeDuplicates(nums);// 在函数里修改输入数组对于调用者是可见的。// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。for (int i = 0; i &lt; len; i++) &#123; print(nums[i]);&#125; 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 标签 双指针 数组 解题思路原地算法，就是不依赖额外的资源或者依赖少数的额外资源，仅依靠输出来覆盖输入的一种算法操作。 在不复制数组的情况下从数组中删除元素的一些提示： 尝试双指针法。 你是否使用“元素顺序可以更改”这一属性？ 当要删除的元素很少时会发生什么？解法一：双指针 注意是原地算法，数组长度是会变动的，所以定义一个变量存储数组长度。12345678910111213141516/** * @param &#123;number[]&#125; nums * @return &#123;number&#125; */var removeDuplicates = function(nums) &#123; const length = nums.length if(length == 0) return 0 let slow = 0 for(let fast = 1; fast &lt; length; fast++) &#123; if(nums[slow] !== nums[fast]) &#123; slow++ nums[slow] = nums[fast] &#125; &#125; return slow + 1&#125;; 也可以看下 27. 移除元素 的写法，基本一样。","content":"<!--\n * @File: \n * @Author: 张宏亮 - zhl@xiaoniren.cn\n * @Date: 2019-08-18 15:46:12\n * @LastEditors: 张宏亮<zhl@xiaoniren.cn>\n * @LastEditTime: 2019-08-18 17:23:25\n * @Description: file content\n * @Versions: 1.0.0\n -->\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p>\n<p>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</p>\n<p>示例 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定数组 nums = [1,1,2], </span><br><span class=\"line\"></span><br><span class=\"line\">函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。 </span><br><span class=\"line\"></span><br><span class=\"line\">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure></p>\n<p>示例 2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定 nums = [0,0,1,1,1,2,2,3,3,4],</span><br><span class=\"line\"></span><br><span class=\"line\">函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。</span><br><span class=\"line\"></span><br><span class=\"line\">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure></p>\n<p>说明:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">为什么返回数值是整数，但输出的答案是数组呢?</span><br><span class=\"line\"></span><br><span class=\"line\">请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</span><br></pre></td></tr></table></figure></p>\n<p>你可以想象内部操作如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝</span><br><span class=\"line\">int len = removeDuplicates(nums);</span><br><span class=\"line\"></span><br><span class=\"line\">// 在函数里修改输入数组对于调用者是可见的。</span><br><span class=\"line\">// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。</span><br><span class=\"line\">for (int i = 0; i &lt; len; i++) &#123;</span><br><span class=\"line\">    print(nums[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<p>标签 <strong>双指针</strong> <strong>数组</strong></p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>原地算法，就是不依赖额外的资源或者依赖少数的额外资源，仅依靠输出来覆盖输入的一种算法操作。</p>\n<p>在不复制数组的情况下从数组中删除元素的一些提示：</p>\n<ul>\n<li>尝试双指针法。</li>\n<li>你是否使用“元素顺序可以更改”这一属性？</li>\n<li>当要删除的元素很少时会发生什么？<h3 id=\"解法一：双指针\"><a href=\"#解法一：双指针\" class=\"headerlink\" title=\"解法一：双指针\"></a>解法一：双指针</h3></li>\n</ul>\n<p>注意是原地算法，数组长度是会变动的，所以定义一个变量存储数组长度。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">nums</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> removeDuplicates = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> length = nums.length</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> slow = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> fast = <span class=\"number\">1</span>; fast &lt; length; fast++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[slow] !== nums[fast]) &#123;</span><br><span class=\"line\">            slow++</span><br><span class=\"line\">            nums[slow] = nums[fast]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> slow + <span class=\"number\">1</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>也可以看下 <a href=\"https://github.com/zhl1232/javascript-algorithm/tree/master/solve-problems/27.md\" target=\"_blank\" rel=\"noopener\">27. 移除元素</a> 的写法，基本一样。</p>\n"},{"title":"leetcode.24.两两交换链表中的节点","text":"题目描述给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。 你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。 示例:1给定 1-&gt;2-&gt;3-&gt;4, 你应该返回 2-&gt;1-&gt;4-&gt;3. 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/swap-nodes-in-pairs著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 标签 链表 解题思路这道题递归和非递归其实差不多。 先拆分子问题， 要把 head 和 head.next 交换，也就是相邻的节点交换 交换之后的 head.next.next 要指向下一对交换节点的 head 节点 然后递归直到 head 或者 head.next 为 null，也就是不够两个节点进行交换 要注意递归时传入下一对交换节点的 head 节点要传哪个，1234567891011121314151617181920/** * Definition for singly-linked list. * function ListNode(val) &#123; * this.val = val; * this.next = null; * &#125; *//** * @param &#123;ListNode&#125; head * @return &#123;ListNode&#125; */var swapPairs = function(head) &#123; if(!head || !head.next) &#123; return head &#125; let tempHead = head.next head.next = swapPairs(head.next.next) tempHead.next = head return tempHead&#125;; 非递归写法 12345678910111213var swapPairs = function(head) &#123; let tempHead = new ListNode(0) tempHead.next = head let prev = tempHead while(prev.next &amp;&amp; prev.next.next) &#123; let a = prev.next let b = a.next prev.next = a.next a.next = b.next prev = b.next = a &#125; return tempHead.next&#125;;","content":"<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。</p>\n<p>你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p>\n<p>示例:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定 1-&gt;2-&gt;3-&gt;4, 你应该返回 2-&gt;1-&gt;4-&gt;3.</span><br></pre></td></tr></table></figure></p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/swap-nodes-in-pairs\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/swap-nodes-in-pairs</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<p>标签 <strong>链表</strong></p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>这道题递归和非递归其实差不多。</p>\n<p>先拆分子问题，</p>\n<ol>\n<li>要把 head 和 head.next 交换，也就是相邻的节点交换</li>\n<li>交换之后的 head.next.next 要指向下一对交换节点的 head 节点</li>\n<li>然后递归直到 head 或者 head.next 为 null，也就是不够两个节点进行交换</li>\n<li>要注意递归时传入下一对交换节点的 head 节点要传哪个，<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * function ListNode(val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.val = val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     this.next = null;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;ListNode&#125;</span> <span class=\"variable\">head</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;ListNode&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> swapPairs = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!head || !head.next) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tempHead = head.next   </span><br><span class=\"line\">    head.next = swapPairs(head.next.next)  </span><br><span class=\"line\">    tempHead.next = head</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tempHead</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>非递归写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> swapPairs = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">head</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> tempHead = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>)</span><br><span class=\"line\">    tempHead.next = head</span><br><span class=\"line\">    <span class=\"keyword\">let</span> prev = tempHead</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(prev.next &amp;&amp; prev.next.next) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> a = prev.next</span><br><span class=\"line\">        <span class=\"keyword\">let</span> b = a.next</span><br><span class=\"line\">        prev.next = a.next</span><br><span class=\"line\">        a.next = b.next</span><br><span class=\"line\">        prev = b.next = a</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tempHead.next</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"leetcode.20.有效的括号","text":"题目描述给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。 有效字符串需满足：123左括号必须用相同类型的右括号闭合。左括号必须以正确的顺序闭合。注意空字符串可被认为是有效字符串。 示例 1:12输入: &quot;()&quot;输出: true 示例 2:12输入: &quot;()[]&#123;&#125;&quot;输出: true 示例 3:12输入: &quot;(]&quot;输出: false 示例 4:12输入: &quot;([)]&quot;输出: false 示例 5:12输入: &quot;&#123;[]&#125;&quot;输出: true 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/valid-parentheses著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 标签 栈 字符串 解题思路 如果括号数量为奇数，肯定是错误的 如果括号数量为偶数，使用栈，遍历输入字符串 如果当前字符为左半边括号时，肯定是正确的，将其压入栈中 如果遇到右半边括号时，右半边括号与栈顶的左半括号不匹配，返回错误 如果匹配，把匹配的左半括号弹出栈 图片来自： https://github.com/MisterBooo/LeetCodeAnimation 解法一1234567891011121314151617181920212223242526272829303132333435/** * @param &#123;string&#125; s * @return &#123;boolean&#125; */var isValid = function(s) &#123; let sArr = s.split('') let temp = [] let res = true if(sArr.length % 2 == 1) return false try &#123; sArr.forEach(item =&gt; &#123; if (item.match(/\\(|\\&#123;|\\[/)) &#123; temp.push(item) &#125; else &#123; if (item == ')' &amp;&amp; temp.pop() == '(') &#123; return &#125; else if (item == '&#125;' &amp;&amp; temp.pop() == '&#123;') &#123; return &#125; else if (item == ']' &amp;&amp; temp.pop() == '[') &#123; return &#125; else &#123; res = false throw new Error() // 如果为false，用try catch跳出循环 &#125; &#125; &#125;) &#125; catch (error) &#123;&#125; if (temp.length == 0 &amp;&amp; res) &#123; return true &#125; else &#123; return false &#125;&#125;; js没有现成的栈，用数组模拟可以用 try catch 跳出 forEach 循环 这道题写法可能各不相同，但解题逻辑只有这一种。 比如写法可以把每对括号存hash表里，然后匹配的时候用 key: value 匹配对应的括号 或者用for循环，跳出和return容易很多。1let hash = &#123; ')': '(', '&#125;': '&#123;', ']': '[' &#125; 扩展事实上，这类问题还可以进一步扩展，我们可以去解析类似HTML等标记语法， 比如检查XML标签是否闭合如何检查， 更进一步如果要你实现一个简单的XML的解析器，应该怎么实现？","content":"<!--\n * @File: \n * @Author: 张宏亮 - zhl@xiaoniren.cn\n * @Date: 2019-08-18 15:46:12\n * @LastEditors: 张宏亮<hongliang@yunshan.net>\n * @LastEditTime: 2019-09-22 16:03:00\n * @Description: file content\n * @Versions: 1.0.0\n -->\n<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</p>\n<p>有效字符串需满足：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">左括号必须用相同类型的右括号闭合。</span><br><span class=\"line\">左括号必须以正确的顺序闭合。</span><br><span class=\"line\">注意空字符串可被认为是有效字符串。</span><br></pre></td></tr></table></figure></p>\n<p>示例 1:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: &quot;()&quot;</span><br><span class=\"line\">输出: true</span><br></pre></td></tr></table></figure></p>\n<p>示例 2:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: &quot;()[]&#123;&#125;&quot;</span><br><span class=\"line\">输出: true</span><br></pre></td></tr></table></figure></p>\n<p>示例 3:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: &quot;(]&quot;</span><br><span class=\"line\">输出: false</span><br></pre></td></tr></table></figure></p>\n<p>示例 4:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: &quot;([)]&quot;</span><br><span class=\"line\">输出: false</span><br></pre></td></tr></table></figure></p>\n<p>示例 5:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: &quot;&#123;[]&#125;&quot;</span><br><span class=\"line\">输出: true</span><br></pre></td></tr></table></figure></p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/valid-parentheses\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/valid-parentheses</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<p>标签 <strong>栈</strong> <strong>字符串</strong></p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><ol>\n<li>如果括号数量为奇数，肯定是错误的</li>\n<li>如果括号数量为偶数，使用栈，遍历输入字符串</li>\n<li>如果当前字符为左半边括号时，肯定是正确的，将其压入栈中</li>\n<li>如果遇到右半边括号时，右半边括号与栈顶的左半括号不匹配，返回错误</li>\n<li>如果匹配，把匹配的左半括号弹出栈</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/zhl1232/javascript-algorithm/master/static/img/stack.png\" alt=\"image\"></p>\n<p>图片来自： <a href=\"https://github.com/MisterBooo/LeetCodeAnimation\" target=\"_blank\" rel=\"noopener\">https://github.com/MisterBooo/LeetCodeAnimation</a></p>\n<h3 id=\"解法一\"><a href=\"#解法一\" class=\"headerlink\" title=\"解法一\"></a>解法一</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;string&#125;</span> <span class=\"variable\">s</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;boolean&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> isValid = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sArr = s.split(<span class=\"string\">''</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> temp = []</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(sArr.length % <span class=\"number\">2</span> == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      sArr.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item.match(<span class=\"regexp\">/\\(|\\&#123;|\\[/</span>)) &#123;</span><br><span class=\"line\">          temp.push(item)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (item == <span class=\"string\">')'</span> &amp;&amp; temp.pop() == <span class=\"string\">'('</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item == <span class=\"string\">'&#125;'</span> &amp;&amp; temp.pop() == <span class=\"string\">'&#123;'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item == <span class=\"string\">']'</span> &amp;&amp; temp.pop() == <span class=\"string\">'['</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            res = <span class=\"literal\">false</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>()</span><br><span class=\"line\">            <span class=\"comment\">// 如果为false，用try catch跳出循环</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (temp.length == <span class=\"number\">0</span> &amp;&amp; res) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>js没有现成的栈，用数组模拟<br>可以用 try catch 跳出 forEach 循环</p>\n</blockquote>\n<p>这道题写法可能各不相同，但解题逻辑只有这一种。</p>\n<p>比如写法可以把每对括号存hash表里，然后匹配的时候用 key: value 匹配对应的括号</p>\n<p>或者用for循环，跳出和return容易很多。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> hash = &#123; <span class=\"string\">')'</span>: <span class=\"string\">'('</span>, <span class=\"string\">'&#125;'</span>: <span class=\"string\">'&#123;'</span>, <span class=\"string\">']'</span>: <span class=\"string\">'['</span> &#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h3><p>事实上，这类问题还可以进一步扩展，我们可以去解析类似HTML等标记语法， 比如检查XML标签是否闭合如何检查， 更进一步如果要你实现一个简单的XML的解析器，应该怎么实现？</p>\n"},{"title":"leetcode.11.有效的括号","text":"题目描述给定 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。 说明：你不能倾斜容器，且 n 的值至少为 2。 图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。 示例:12输入: [1,8,6,2,5,4,8,3,7]输出: 49 来源：力扣（LeetCode）链接：https://leetcode-cn.com/problems/container-with-most-water著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 标签 数组 双指针 解题思路设置对撞指针 left，right，每次选两指针中的短板向中间移动1格，并且更新面积最大值 res，直到 i == j 时返回 res。 至于为什么移动短的指针不会漏掉最优解，下面这个是大神写的正确性证明。 11题双指针正确性证明 下面这个可能容易理解点 原面积s = h(i) * w 如果移动 j, 有两种肩况 移动后 j’ 的高度比i 高, s’= h(i) * (w-l) &lt; s 移动后 j’ 的高度比i 低, s’= h(j’) * (w-l) &lt; s 两种情况下, 移动后的面积s 都会小于s所以可证， 只有移动较短边才有可能面积更大 解法一：双指针1234567891011121314151617181920/** * @param &#123;number[]&#125; height * @return &#123;number&#125; */var maxArea = function(height) &#123; let res = 0 let left = 0 let right = height.length - 1 while(left &lt; right) &#123; let h = Math.min(height[left], height[right]) let w = right - left res = Math.max(h * w, res) if(height[left] &lt; height[right]) &#123; left++ &#125; else &#123; right-- &#125; &#125; return res&#125;;","content":"<h3 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h3><p>给定 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p>\n<p>说明：你不能倾斜容器，且 n 的值至少为 2。</p>\n<p><img src=\"https://raw.githubusercontent.com/zhl1232/javascript-algorithm/master/static/img/11.jpg\" alt=\"image\"></p>\n<p>图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</p>\n<p>示例:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: [1,8,6,2,5,4,8,3,7]</span><br><span class=\"line\">输出: 49</span><br></pre></td></tr></table></figure></p>\n<p>来源：力扣（LeetCode）<br>链接：<a href=\"https://leetcode-cn.com/problems/container-with-most-water\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/container-with-most-water</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n<p>标签 <strong>数组</strong> <strong>双指针</strong></p>\n<h3 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h3><p>设置对撞指针 left，right，每次选两指针中的短板向中间移动1格，并且更新面积最大值 res，直到 i == j 时返回 res。</p>\n<p>至于为什么移动短的指针不会漏掉最优解，下面这个是大神写的正确性证明。</p>\n<p><a href=\"https://leetcode-cn.com/problems/container-with-most-water/solution/shuang-zhi-zhen-fa-zheng-que-xing-zheng-ming-by-r3/\" target=\"_blank\" rel=\"noopener\">11题双指针正确性证明</a></p>\n<p>下面这个可能容易理解点</p>\n<p><img src=\"https://raw.githubusercontent.com/zhl1232/javascript-algorithm/master/static/img/11-1.png\" alt=\"image\"></p>\n<ol>\n<li>原面积s = h(i) * w</li>\n<li>如果移动 j, 有两种肩况</li>\n<li>移动后 j’ 的高度比i 高, s’= h(i) * (w-l) &lt; s</li>\n<li>移动后 j’ 的高度比i 低, s’= h(j’) * (w-l) &lt; s</li>\n<li>两种情况下, 移动后的面积s 都会小于s<br>所以可证， 只有移动较短边才有可能面积更大</li>\n</ol>\n<h3 id=\"解法一：双指针\"><a href=\"#解法一：双指针\" class=\"headerlink\" title=\"解法一：双指针\"></a>解法一：双指针</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param <span class=\"type\">&#123;number[]&#125;</span> <span class=\"variable\">height</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return <span class=\"type\">&#123;number&#125;</span></span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> maxArea = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">height</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> left = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> right = height.length - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left &lt; right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> h = <span class=\"built_in\">Math</span>.min(height[left], height[right])</span><br><span class=\"line\">        <span class=\"keyword\">let</span> w = right - left</span><br><span class=\"line\">        res = <span class=\"built_in\">Math</span>.max(h * w, res)</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(height[left] &lt; height[right]) &#123;</span><br><span class=\"line\">            left++</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            right--</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"404","text":"","content":""}],"categories":[],"tags":[]}